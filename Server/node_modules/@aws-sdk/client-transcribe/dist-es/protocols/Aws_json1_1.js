import { __assign, __awaiter, __generator, __read } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, expectUnion as __expectUnion, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, throwDefaultError, } from "@aws-sdk/smithy-client";
import { BadRequestException, ConflictException, InternalFailureException, LimitExceededException, NotFoundException, Rule, } from "../models/models_0";
import { TranscribeServiceException as __BaseException } from "../models/TranscribeServiceException";
export var serializeAws_json1_1CreateCallAnalyticsCategoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.CreateCallAnalyticsCategory",
        };
        body = JSON.stringify(serializeAws_json1_1CreateCallAnalyticsCategoryRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1CreateLanguageModelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.CreateLanguageModel",
        };
        body = JSON.stringify(serializeAws_json1_1CreateLanguageModelRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1CreateMedicalVocabularyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.CreateMedicalVocabulary",
        };
        body = JSON.stringify(serializeAws_json1_1CreateMedicalVocabularyRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1CreateVocabularyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.CreateVocabulary",
        };
        body = JSON.stringify(serializeAws_json1_1CreateVocabularyRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1CreateVocabularyFilterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.CreateVocabularyFilter",
        };
        body = JSON.stringify(serializeAws_json1_1CreateVocabularyFilterRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DeleteCallAnalyticsCategoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.DeleteCallAnalyticsCategory",
        };
        body = JSON.stringify(serializeAws_json1_1DeleteCallAnalyticsCategoryRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DeleteCallAnalyticsJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.DeleteCallAnalyticsJob",
        };
        body = JSON.stringify(serializeAws_json1_1DeleteCallAnalyticsJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DeleteLanguageModelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.DeleteLanguageModel",
        };
        body = JSON.stringify(serializeAws_json1_1DeleteLanguageModelRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DeleteMedicalTranscriptionJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.DeleteMedicalTranscriptionJob",
        };
        body = JSON.stringify(serializeAws_json1_1DeleteMedicalTranscriptionJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DeleteMedicalVocabularyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.DeleteMedicalVocabulary",
        };
        body = JSON.stringify(serializeAws_json1_1DeleteMedicalVocabularyRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DeleteTranscriptionJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.DeleteTranscriptionJob",
        };
        body = JSON.stringify(serializeAws_json1_1DeleteTranscriptionJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DeleteVocabularyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.DeleteVocabulary",
        };
        body = JSON.stringify(serializeAws_json1_1DeleteVocabularyRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DeleteVocabularyFilterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.DeleteVocabularyFilter",
        };
        body = JSON.stringify(serializeAws_json1_1DeleteVocabularyFilterRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DescribeLanguageModelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.DescribeLanguageModel",
        };
        body = JSON.stringify(serializeAws_json1_1DescribeLanguageModelRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetCallAnalyticsCategoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.GetCallAnalyticsCategory",
        };
        body = JSON.stringify(serializeAws_json1_1GetCallAnalyticsCategoryRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetCallAnalyticsJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.GetCallAnalyticsJob",
        };
        body = JSON.stringify(serializeAws_json1_1GetCallAnalyticsJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetMedicalTranscriptionJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.GetMedicalTranscriptionJob",
        };
        body = JSON.stringify(serializeAws_json1_1GetMedicalTranscriptionJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetMedicalVocabularyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.GetMedicalVocabulary",
        };
        body = JSON.stringify(serializeAws_json1_1GetMedicalVocabularyRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetTranscriptionJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.GetTranscriptionJob",
        };
        body = JSON.stringify(serializeAws_json1_1GetTranscriptionJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetVocabularyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.GetVocabulary",
        };
        body = JSON.stringify(serializeAws_json1_1GetVocabularyRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetVocabularyFilterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.GetVocabularyFilter",
        };
        body = JSON.stringify(serializeAws_json1_1GetVocabularyFilterRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListCallAnalyticsCategoriesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.ListCallAnalyticsCategories",
        };
        body = JSON.stringify(serializeAws_json1_1ListCallAnalyticsCategoriesRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListCallAnalyticsJobsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.ListCallAnalyticsJobs",
        };
        body = JSON.stringify(serializeAws_json1_1ListCallAnalyticsJobsRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListLanguageModelsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.ListLanguageModels",
        };
        body = JSON.stringify(serializeAws_json1_1ListLanguageModelsRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListMedicalTranscriptionJobsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.ListMedicalTranscriptionJobs",
        };
        body = JSON.stringify(serializeAws_json1_1ListMedicalTranscriptionJobsRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListMedicalVocabulariesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.ListMedicalVocabularies",
        };
        body = JSON.stringify(serializeAws_json1_1ListMedicalVocabulariesRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListTagsForResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.ListTagsForResource",
        };
        body = JSON.stringify(serializeAws_json1_1ListTagsForResourceRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListTranscriptionJobsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.ListTranscriptionJobs",
        };
        body = JSON.stringify(serializeAws_json1_1ListTranscriptionJobsRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListVocabulariesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.ListVocabularies",
        };
        body = JSON.stringify(serializeAws_json1_1ListVocabulariesRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListVocabularyFiltersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.ListVocabularyFilters",
        };
        body = JSON.stringify(serializeAws_json1_1ListVocabularyFiltersRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1StartCallAnalyticsJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.StartCallAnalyticsJob",
        };
        body = JSON.stringify(serializeAws_json1_1StartCallAnalyticsJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1StartMedicalTranscriptionJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.StartMedicalTranscriptionJob",
        };
        body = JSON.stringify(serializeAws_json1_1StartMedicalTranscriptionJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1StartTranscriptionJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.StartTranscriptionJob",
        };
        body = JSON.stringify(serializeAws_json1_1StartTranscriptionJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1TagResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.TagResource",
        };
        body = JSON.stringify(serializeAws_json1_1TagResourceRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UntagResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.UntagResource",
        };
        body = JSON.stringify(serializeAws_json1_1UntagResourceRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdateCallAnalyticsCategoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.UpdateCallAnalyticsCategory",
        };
        body = JSON.stringify(serializeAws_json1_1UpdateCallAnalyticsCategoryRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdateMedicalVocabularyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.UpdateMedicalVocabulary",
        };
        body = JSON.stringify(serializeAws_json1_1UpdateMedicalVocabularyRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdateVocabularyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.UpdateVocabulary",
        };
        body = JSON.stringify(serializeAws_json1_1UpdateVocabularyRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdateVocabularyFilterCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "Transcribe.UpdateVocabularyFilter",
        };
        body = JSON.stringify(serializeAws_json1_1UpdateVocabularyFilterRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var deserializeAws_json1_1CreateCallAnalyticsCategoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1CreateCallAnalyticsCategoryCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1CreateCallAnalyticsCategoryResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1CreateCallAnalyticsCategoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.transcribe#ConflictException": return [3, 4];
                    case "InternalFailureException": return [3, 6];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1CreateLanguageModelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1CreateLanguageModelCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1CreateLanguageModelResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1CreateLanguageModelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.transcribe#ConflictException": return [3, 4];
                    case "InternalFailureException": return [3, 6];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1CreateMedicalVocabularyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1CreateMedicalVocabularyCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1CreateMedicalVocabularyResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1CreateMedicalVocabularyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.transcribe#ConflictException": return [3, 4];
                    case "InternalFailureException": return [3, 6];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1CreateVocabularyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1CreateVocabularyCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1CreateVocabularyResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1CreateVocabularyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.transcribe#ConflictException": return [3, 4];
                    case "InternalFailureException": return [3, 6];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1CreateVocabularyFilterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1CreateVocabularyFilterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1CreateVocabularyFilterResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1CreateVocabularyFilterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.transcribe#ConflictException": return [3, 4];
                    case "InternalFailureException": return [3, 6];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1DeleteCallAnalyticsCategoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DeleteCallAnalyticsCategoryCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DeleteCallAnalyticsCategoryResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DeleteCallAnalyticsCategoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1DeleteCallAnalyticsJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DeleteCallAnalyticsJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DeleteCallAnalyticsJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DeleteCallAnalyticsJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1DeleteLanguageModelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DeleteLanguageModelCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DeleteLanguageModelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1DeleteMedicalTranscriptionJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DeleteMedicalTranscriptionJobCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DeleteMedicalTranscriptionJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1DeleteMedicalVocabularyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DeleteMedicalVocabularyCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DeleteMedicalVocabularyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1DeleteTranscriptionJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DeleteTranscriptionJobCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DeleteTranscriptionJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1DeleteVocabularyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DeleteVocabularyCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DeleteVocabularyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1DeleteVocabularyFilterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DeleteVocabularyFilterCommandError(output, context)];
                }
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DeleteVocabularyFilterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1DescribeLanguageModelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DescribeLanguageModelCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DescribeLanguageModelResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DescribeLanguageModelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1GetCallAnalyticsCategoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1GetCallAnalyticsCategoryCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetCallAnalyticsCategoryResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetCallAnalyticsCategoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1GetCallAnalyticsJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1GetCallAnalyticsJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetCallAnalyticsJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetCallAnalyticsJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1GetMedicalTranscriptionJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1GetMedicalTranscriptionJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetMedicalTranscriptionJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetMedicalTranscriptionJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1GetMedicalVocabularyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1GetMedicalVocabularyCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetMedicalVocabularyResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetMedicalVocabularyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1GetTranscriptionJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1GetTranscriptionJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetTranscriptionJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetTranscriptionJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1GetVocabularyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1GetVocabularyCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetVocabularyResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetVocabularyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1GetVocabularyFilterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1GetVocabularyFilterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetVocabularyFilterResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetVocabularyFilterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1ListCallAnalyticsCategoriesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListCallAnalyticsCategoriesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListCallAnalyticsCategoriesResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListCallAnalyticsCategoriesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1ListCallAnalyticsJobsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListCallAnalyticsJobsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListCallAnalyticsJobsResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListCallAnalyticsJobsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1ListLanguageModelsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListLanguageModelsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListLanguageModelsResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListLanguageModelsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1ListMedicalTranscriptionJobsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListMedicalTranscriptionJobsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListMedicalTranscriptionJobsResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListMedicalTranscriptionJobsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1ListMedicalVocabulariesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListMedicalVocabulariesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListMedicalVocabulariesResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListMedicalVocabulariesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1ListTagsForResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListTagsForResourceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListTagsForResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1ListTranscriptionJobsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListTranscriptionJobsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListTranscriptionJobsResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListTranscriptionJobsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1ListVocabulariesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListVocabulariesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListVocabulariesResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListVocabulariesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1ListVocabularyFiltersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListVocabularyFiltersCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListVocabularyFiltersResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListVocabularyFiltersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_json1_1StartCallAnalyticsJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1StartCallAnalyticsJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1StartCallAnalyticsJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1StartCallAnalyticsJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.transcribe#ConflictException": return [3, 4];
                    case "InternalFailureException": return [3, 6];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1StartMedicalTranscriptionJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1StartMedicalTranscriptionJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1StartMedicalTranscriptionJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1StartMedicalTranscriptionJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.transcribe#ConflictException": return [3, 4];
                    case "InternalFailureException": return [3, 6];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1StartTranscriptionJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1StartTranscriptionJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1StartTranscriptionJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1StartTranscriptionJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.transcribe#ConflictException": return [3, 4];
                    case "InternalFailureException": return [3, 6];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_json1_1TagResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1TagResourceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1TagResourceResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1TagResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.transcribe#ConflictException": return [3, 4];
                    case "InternalFailureException": return [3, 6];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_json1_1UntagResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1UntagResourceCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1UntagResourceResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UntagResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.transcribe#ConflictException": return [3, 4];
                    case "InternalFailureException": return [3, 6];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_json1_1UpdateCallAnalyticsCategoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1UpdateCallAnalyticsCategoryCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1UpdateCallAnalyticsCategoryResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdateCallAnalyticsCategoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.transcribe#ConflictException": return [3, 4];
                    case "InternalFailureException": return [3, 6];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_json1_1UpdateMedicalVocabularyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1UpdateMedicalVocabularyCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1UpdateMedicalVocabularyResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdateMedicalVocabularyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.transcribe#ConflictException": return [3, 4];
                    case "InternalFailureException": return [3, 6];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_json1_1UpdateVocabularyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1UpdateVocabularyCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1UpdateVocabularyResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdateVocabularyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.transcribe#ConflictException": return [3, 4];
                    case "InternalFailureException": return [3, 6];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 6];
                    case "LimitExceededException": return [3, 8];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_json1_1UpdateVocabularyFilterCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1UpdateVocabularyFilterCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1UpdateVocabularyFilterResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdateVocabularyFilterCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.transcribe#BadRequestException": return [3, 2];
                    case "InternalFailureException": return [3, 4];
                    case "com.amazonaws.transcribe#InternalFailureException": return [3, 4];
                    case "LimitExceededException": return [3, 6];
                    case "com.amazonaws.transcribe#LimitExceededException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.transcribe#NotFoundException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
var deserializeAws_json1_1BadRequestExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1BadRequestException(body, context);
        exception = new BadRequestException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1ConflictExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ConflictException(body, context);
        exception = new ConflictException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1InternalFailureExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InternalFailureException(body, context);
        exception = new InternalFailureException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1LimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1LimitExceededException(body, context);
        exception = new LimitExceededException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1NotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1NotFoundException(body, context);
        exception = new NotFoundException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var serializeAws_json1_1AbsoluteTimeRange = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.EndTime != null && { EndTime: input.EndTime })), (input.First != null && { First: input.First })), (input.Last != null && { Last: input.Last })), (input.StartTime != null && { StartTime: input.StartTime }));
};
var serializeAws_json1_1CallAnalyticsJobSettings = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.ContentRedaction != null && {
        ContentRedaction: serializeAws_json1_1ContentRedaction(input.ContentRedaction, context),
    })), (input.LanguageIdSettings != null && {
        LanguageIdSettings: serializeAws_json1_1LanguageIdSettingsMap(input.LanguageIdSettings, context),
    })), (input.LanguageModelName != null && { LanguageModelName: input.LanguageModelName })), (input.LanguageOptions != null && {
        LanguageOptions: serializeAws_json1_1LanguageOptions(input.LanguageOptions, context),
    })), (input.VocabularyFilterMethod != null && { VocabularyFilterMethod: input.VocabularyFilterMethod })), (input.VocabularyFilterName != null && { VocabularyFilterName: input.VocabularyFilterName })), (input.VocabularyName != null && { VocabularyName: input.VocabularyName }));
};
var serializeAws_json1_1ChannelDefinition = function (input, context) {
    return __assign(__assign({}, (input.ChannelId != null && { ChannelId: input.ChannelId })), (input.ParticipantRole != null && { ParticipantRole: input.ParticipantRole }));
};
var serializeAws_json1_1ChannelDefinitions = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return serializeAws_json1_1ChannelDefinition(entry, context);
    });
};
var serializeAws_json1_1ContentRedaction = function (input, context) {
    return __assign(__assign(__assign({}, (input.PiiEntityTypes != null && {
        PiiEntityTypes: serializeAws_json1_1PiiEntityTypes(input.PiiEntityTypes, context),
    })), (input.RedactionOutput != null && { RedactionOutput: input.RedactionOutput })), (input.RedactionType != null && { RedactionType: input.RedactionType }));
};
var serializeAws_json1_1CreateCallAnalyticsCategoryRequest = function (input, context) {
    return __assign(__assign({}, (input.CategoryName != null && { CategoryName: input.CategoryName })), (input.Rules != null && { Rules: serializeAws_json1_1RuleList(input.Rules, context) }));
};
var serializeAws_json1_1CreateLanguageModelRequest = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign({}, (input.BaseModelName != null && { BaseModelName: input.BaseModelName })), (input.InputDataConfig != null && {
        InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
    })), (input.LanguageCode != null && { LanguageCode: input.LanguageCode })), (input.ModelName != null && { ModelName: input.ModelName })), (input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }));
};
var serializeAws_json1_1CreateMedicalVocabularyRequest = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.LanguageCode != null && { LanguageCode: input.LanguageCode })), (input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) })), (input.VocabularyFileUri != null && { VocabularyFileUri: input.VocabularyFileUri })), (input.VocabularyName != null && { VocabularyName: input.VocabularyName }));
};
var serializeAws_json1_1CreateVocabularyFilterRequest = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign({}, (input.LanguageCode != null && { LanguageCode: input.LanguageCode })), (input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) })), (input.VocabularyFilterFileUri != null && { VocabularyFilterFileUri: input.VocabularyFilterFileUri })), (input.VocabularyFilterName != null && { VocabularyFilterName: input.VocabularyFilterName })), (input.Words != null && { Words: serializeAws_json1_1Words(input.Words, context) }));
};
var serializeAws_json1_1CreateVocabularyRequest = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign({}, (input.LanguageCode != null && { LanguageCode: input.LanguageCode })), (input.Phrases != null && { Phrases: serializeAws_json1_1Phrases(input.Phrases, context) })), (input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) })), (input.VocabularyFileUri != null && { VocabularyFileUri: input.VocabularyFileUri })), (input.VocabularyName != null && { VocabularyName: input.VocabularyName }));
};
var serializeAws_json1_1DeleteCallAnalyticsCategoryRequest = function (input, context) {
    return __assign({}, (input.CategoryName != null && { CategoryName: input.CategoryName }));
};
var serializeAws_json1_1DeleteCallAnalyticsJobRequest = function (input, context) {
    return __assign({}, (input.CallAnalyticsJobName != null && { CallAnalyticsJobName: input.CallAnalyticsJobName }));
};
var serializeAws_json1_1DeleteLanguageModelRequest = function (input, context) {
    return __assign({}, (input.ModelName != null && { ModelName: input.ModelName }));
};
var serializeAws_json1_1DeleteMedicalTranscriptionJobRequest = function (input, context) {
    return __assign({}, (input.MedicalTranscriptionJobName != null && {
        MedicalTranscriptionJobName: input.MedicalTranscriptionJobName,
    }));
};
var serializeAws_json1_1DeleteMedicalVocabularyRequest = function (input, context) {
    return __assign({}, (input.VocabularyName != null && { VocabularyName: input.VocabularyName }));
};
var serializeAws_json1_1DeleteTranscriptionJobRequest = function (input, context) {
    return __assign({}, (input.TranscriptionJobName != null && { TranscriptionJobName: input.TranscriptionJobName }));
};
var serializeAws_json1_1DeleteVocabularyFilterRequest = function (input, context) {
    return __assign({}, (input.VocabularyFilterName != null && { VocabularyFilterName: input.VocabularyFilterName }));
};
var serializeAws_json1_1DeleteVocabularyRequest = function (input, context) {
    return __assign({}, (input.VocabularyName != null && { VocabularyName: input.VocabularyName }));
};
var serializeAws_json1_1DescribeLanguageModelRequest = function (input, context) {
    return __assign({}, (input.ModelName != null && { ModelName: input.ModelName }));
};
var serializeAws_json1_1GetCallAnalyticsCategoryRequest = function (input, context) {
    return __assign({}, (input.CategoryName != null && { CategoryName: input.CategoryName }));
};
var serializeAws_json1_1GetCallAnalyticsJobRequest = function (input, context) {
    return __assign({}, (input.CallAnalyticsJobName != null && { CallAnalyticsJobName: input.CallAnalyticsJobName }));
};
var serializeAws_json1_1GetMedicalTranscriptionJobRequest = function (input, context) {
    return __assign({}, (input.MedicalTranscriptionJobName != null && {
        MedicalTranscriptionJobName: input.MedicalTranscriptionJobName,
    }));
};
var serializeAws_json1_1GetMedicalVocabularyRequest = function (input, context) {
    return __assign({}, (input.VocabularyName != null && { VocabularyName: input.VocabularyName }));
};
var serializeAws_json1_1GetTranscriptionJobRequest = function (input, context) {
    return __assign({}, (input.TranscriptionJobName != null && { TranscriptionJobName: input.TranscriptionJobName }));
};
var serializeAws_json1_1GetVocabularyFilterRequest = function (input, context) {
    return __assign({}, (input.VocabularyFilterName != null && { VocabularyFilterName: input.VocabularyFilterName }));
};
var serializeAws_json1_1GetVocabularyRequest = function (input, context) {
    return __assign({}, (input.VocabularyName != null && { VocabularyName: input.VocabularyName }));
};
var serializeAws_json1_1InputDataConfig = function (input, context) {
    return __assign(__assign(__assign({}, (input.DataAccessRoleArn != null && { DataAccessRoleArn: input.DataAccessRoleArn })), (input.S3Uri != null && { S3Uri: input.S3Uri })), (input.TuningDataS3Uri != null && { TuningDataS3Uri: input.TuningDataS3Uri }));
};
var serializeAws_json1_1InterruptionFilter = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign({}, (input.AbsoluteTimeRange != null && {
        AbsoluteTimeRange: serializeAws_json1_1AbsoluteTimeRange(input.AbsoluteTimeRange, context),
    })), (input.Negate != null && { Negate: input.Negate })), (input.ParticipantRole != null && { ParticipantRole: input.ParticipantRole })), (input.RelativeTimeRange != null && {
        RelativeTimeRange: serializeAws_json1_1RelativeTimeRange(input.RelativeTimeRange, context),
    })), (input.Threshold != null && { Threshold: input.Threshold }));
};
var serializeAws_json1_1JobExecutionSettings = function (input, context) {
    return __assign(__assign({}, (input.AllowDeferredExecution != null && { AllowDeferredExecution: input.AllowDeferredExecution })), (input.DataAccessRoleArn != null && { DataAccessRoleArn: input.DataAccessRoleArn }));
};
var serializeAws_json1_1KMSEncryptionContextMap = function (input, context) {
    return Object.entries(input).reduce(function (acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        if (value === null) {
            return acc;
        }
        return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var serializeAws_json1_1LanguageIdSettings = function (input, context) {
    return __assign(__assign(__assign({}, (input.LanguageModelName != null && { LanguageModelName: input.LanguageModelName })), (input.VocabularyFilterName != null && { VocabularyFilterName: input.VocabularyFilterName })), (input.VocabularyName != null && { VocabularyName: input.VocabularyName }));
};
var serializeAws_json1_1LanguageIdSettingsMap = function (input, context) {
    return Object.entries(input).reduce(function (acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        if (value === null) {
            return acc;
        }
        return __assign(__assign({}, acc), (_b = {}, _b[key] = serializeAws_json1_1LanguageIdSettings(value, context), _b));
    }, {});
};
var serializeAws_json1_1LanguageOptions = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_json1_1ListCallAnalyticsCategoriesRequest = function (input, context) {
    return __assign(__assign({}, (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NextToken != null && { NextToken: input.NextToken }));
};
var serializeAws_json1_1ListCallAnalyticsJobsRequest = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.JobNameContains != null && { JobNameContains: input.JobNameContains })), (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NextToken != null && { NextToken: input.NextToken })), (input.Status != null && { Status: input.Status }));
};
var serializeAws_json1_1ListLanguageModelsRequest = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NameContains != null && { NameContains: input.NameContains })), (input.NextToken != null && { NextToken: input.NextToken })), (input.StatusEquals != null && { StatusEquals: input.StatusEquals }));
};
var serializeAws_json1_1ListMedicalTranscriptionJobsRequest = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.JobNameContains != null && { JobNameContains: input.JobNameContains })), (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NextToken != null && { NextToken: input.NextToken })), (input.Status != null && { Status: input.Status }));
};
var serializeAws_json1_1ListMedicalVocabulariesRequest = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NameContains != null && { NameContains: input.NameContains })), (input.NextToken != null && { NextToken: input.NextToken })), (input.StateEquals != null && { StateEquals: input.StateEquals }));
};
var serializeAws_json1_1ListTagsForResourceRequest = function (input, context) {
    return __assign({}, (input.ResourceArn != null && { ResourceArn: input.ResourceArn }));
};
var serializeAws_json1_1ListTranscriptionJobsRequest = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.JobNameContains != null && { JobNameContains: input.JobNameContains })), (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NextToken != null && { NextToken: input.NextToken })), (input.Status != null && { Status: input.Status }));
};
var serializeAws_json1_1ListVocabulariesRequest = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NameContains != null && { NameContains: input.NameContains })), (input.NextToken != null && { NextToken: input.NextToken })), (input.StateEquals != null && { StateEquals: input.StateEquals }));
};
var serializeAws_json1_1ListVocabularyFiltersRequest = function (input, context) {
    return __assign(__assign(__assign({}, (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NameContains != null && { NameContains: input.NameContains })), (input.NextToken != null && { NextToken: input.NextToken }));
};
var serializeAws_json1_1Media = function (input, context) {
    return __assign(__assign({}, (input.MediaFileUri != null && { MediaFileUri: input.MediaFileUri })), (input.RedactedMediaFileUri != null && { RedactedMediaFileUri: input.RedactedMediaFileUri }));
};
var serializeAws_json1_1MedicalTranscriptionSetting = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign({}, (input.ChannelIdentification != null && { ChannelIdentification: input.ChannelIdentification })), (input.MaxAlternatives != null && { MaxAlternatives: input.MaxAlternatives })), (input.MaxSpeakerLabels != null && { MaxSpeakerLabels: input.MaxSpeakerLabels })), (input.ShowAlternatives != null && { ShowAlternatives: input.ShowAlternatives })), (input.ShowSpeakerLabels != null && { ShowSpeakerLabels: input.ShowSpeakerLabels })), (input.VocabularyName != null && { VocabularyName: input.VocabularyName }));
};
var serializeAws_json1_1ModelSettings = function (input, context) {
    return __assign({}, (input.LanguageModelName != null && { LanguageModelName: input.LanguageModelName }));
};
var serializeAws_json1_1NonTalkTimeFilter = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.AbsoluteTimeRange != null && {
        AbsoluteTimeRange: serializeAws_json1_1AbsoluteTimeRange(input.AbsoluteTimeRange, context),
    })), (input.Negate != null && { Negate: input.Negate })), (input.RelativeTimeRange != null && {
        RelativeTimeRange: serializeAws_json1_1RelativeTimeRange(input.RelativeTimeRange, context),
    })), (input.Threshold != null && { Threshold: input.Threshold }));
};
var serializeAws_json1_1Phrases = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_json1_1PiiEntityTypes = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_json1_1RelativeTimeRange = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.EndPercentage != null && { EndPercentage: input.EndPercentage })), (input.First != null && { First: input.First })), (input.Last != null && { Last: input.Last })), (input.StartPercentage != null && { StartPercentage: input.StartPercentage }));
};
var serializeAws_json1_1Rule = function (input, context) {
    return Rule.visit(input, {
        InterruptionFilter: function (value) { return ({ InterruptionFilter: serializeAws_json1_1InterruptionFilter(value, context) }); },
        NonTalkTimeFilter: function (value) { return ({ NonTalkTimeFilter: serializeAws_json1_1NonTalkTimeFilter(value, context) }); },
        SentimentFilter: function (value) { return ({ SentimentFilter: serializeAws_json1_1SentimentFilter(value, context) }); },
        TranscriptFilter: function (value) { return ({ TranscriptFilter: serializeAws_json1_1TranscriptFilter(value, context) }); },
        _: function (name, value) { return ({ name: value }); },
    });
};
var serializeAws_json1_1RuleList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return serializeAws_json1_1Rule(entry, context);
    });
};
var serializeAws_json1_1SentimentFilter = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign({}, (input.AbsoluteTimeRange != null && {
        AbsoluteTimeRange: serializeAws_json1_1AbsoluteTimeRange(input.AbsoluteTimeRange, context),
    })), (input.Negate != null && { Negate: input.Negate })), (input.ParticipantRole != null && { ParticipantRole: input.ParticipantRole })), (input.RelativeTimeRange != null && {
        RelativeTimeRange: serializeAws_json1_1RelativeTimeRange(input.RelativeTimeRange, context),
    })), (input.Sentiments != null && { Sentiments: serializeAws_json1_1SentimentValueList(input.Sentiments, context) }));
};
var serializeAws_json1_1SentimentValueList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_json1_1Settings = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.ChannelIdentification != null && { ChannelIdentification: input.ChannelIdentification })), (input.MaxAlternatives != null && { MaxAlternatives: input.MaxAlternatives })), (input.MaxSpeakerLabels != null && { MaxSpeakerLabels: input.MaxSpeakerLabels })), (input.ShowAlternatives != null && { ShowAlternatives: input.ShowAlternatives })), (input.ShowSpeakerLabels != null && { ShowSpeakerLabels: input.ShowSpeakerLabels })), (input.VocabularyFilterMethod != null && { VocabularyFilterMethod: input.VocabularyFilterMethod })), (input.VocabularyFilterName != null && { VocabularyFilterName: input.VocabularyFilterName })), (input.VocabularyName != null && { VocabularyName: input.VocabularyName }));
};
var serializeAws_json1_1StartCallAnalyticsJobRequest = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.CallAnalyticsJobName != null && { CallAnalyticsJobName: input.CallAnalyticsJobName })), (input.ChannelDefinitions != null && {
        ChannelDefinitions: serializeAws_json1_1ChannelDefinitions(input.ChannelDefinitions, context),
    })), (input.DataAccessRoleArn != null && { DataAccessRoleArn: input.DataAccessRoleArn })), (input.Media != null && { Media: serializeAws_json1_1Media(input.Media, context) })), (input.OutputEncryptionKMSKeyId != null && { OutputEncryptionKMSKeyId: input.OutputEncryptionKMSKeyId })), (input.OutputLocation != null && { OutputLocation: input.OutputLocation })), (input.Settings != null && { Settings: serializeAws_json1_1CallAnalyticsJobSettings(input.Settings, context) }));
};
var serializeAws_json1_1StartMedicalTranscriptionJobRequest = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.ContentIdentificationType != null && { ContentIdentificationType: input.ContentIdentificationType })), (input.KMSEncryptionContext != null && {
        KMSEncryptionContext: serializeAws_json1_1KMSEncryptionContextMap(input.KMSEncryptionContext, context),
    })), (input.LanguageCode != null && { LanguageCode: input.LanguageCode })), (input.Media != null && { Media: serializeAws_json1_1Media(input.Media, context) })), (input.MediaFormat != null && { MediaFormat: input.MediaFormat })), (input.MediaSampleRateHertz != null && { MediaSampleRateHertz: input.MediaSampleRateHertz })), (input.MedicalTranscriptionJobName != null && {
        MedicalTranscriptionJobName: input.MedicalTranscriptionJobName,
    })), (input.OutputBucketName != null && { OutputBucketName: input.OutputBucketName })), (input.OutputEncryptionKMSKeyId != null && { OutputEncryptionKMSKeyId: input.OutputEncryptionKMSKeyId })), (input.OutputKey != null && { OutputKey: input.OutputKey })), (input.Settings != null && {
        Settings: serializeAws_json1_1MedicalTranscriptionSetting(input.Settings, context),
    })), (input.Specialty != null && { Specialty: input.Specialty })), (input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) })), (input.Type != null && { Type: input.Type }));
};
var serializeAws_json1_1StartTranscriptionJobRequest = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.ContentRedaction != null && {
        ContentRedaction: serializeAws_json1_1ContentRedaction(input.ContentRedaction, context),
    })), (input.IdentifyLanguage != null && { IdentifyLanguage: input.IdentifyLanguage })), (input.IdentifyMultipleLanguages != null && { IdentifyMultipleLanguages: input.IdentifyMultipleLanguages })), (input.JobExecutionSettings != null && {
        JobExecutionSettings: serializeAws_json1_1JobExecutionSettings(input.JobExecutionSettings, context),
    })), (input.KMSEncryptionContext != null && {
        KMSEncryptionContext: serializeAws_json1_1KMSEncryptionContextMap(input.KMSEncryptionContext, context),
    })), (input.LanguageCode != null && { LanguageCode: input.LanguageCode })), (input.LanguageIdSettings != null && {
        LanguageIdSettings: serializeAws_json1_1LanguageIdSettingsMap(input.LanguageIdSettings, context),
    })), (input.LanguageOptions != null && {
        LanguageOptions: serializeAws_json1_1LanguageOptions(input.LanguageOptions, context),
    })), (input.Media != null && { Media: serializeAws_json1_1Media(input.Media, context) })), (input.MediaFormat != null && { MediaFormat: input.MediaFormat })), (input.MediaSampleRateHertz != null && { MediaSampleRateHertz: input.MediaSampleRateHertz })), (input.ModelSettings != null && {
        ModelSettings: serializeAws_json1_1ModelSettings(input.ModelSettings, context),
    })), (input.OutputBucketName != null && { OutputBucketName: input.OutputBucketName })), (input.OutputEncryptionKMSKeyId != null && { OutputEncryptionKMSKeyId: input.OutputEncryptionKMSKeyId })), (input.OutputKey != null && { OutputKey: input.OutputKey })), (input.Settings != null && { Settings: serializeAws_json1_1Settings(input.Settings, context) })), (input.Subtitles != null && { Subtitles: serializeAws_json1_1Subtitles(input.Subtitles, context) })), (input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) })), (input.TranscriptionJobName != null && { TranscriptionJobName: input.TranscriptionJobName }));
};
var serializeAws_json1_1StringTargetList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_json1_1SubtitleFormats = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_json1_1Subtitles = function (input, context) {
    return __assign(__assign({}, (input.Formats != null && { Formats: serializeAws_json1_1SubtitleFormats(input.Formats, context) })), (input.OutputStartIndex != null && { OutputStartIndex: input.OutputStartIndex }));
};
var serializeAws_json1_1Tag = function (input, context) {
    return __assign(__assign({}, (input.Key != null && { Key: input.Key })), (input.Value != null && { Value: input.Value }));
};
var serializeAws_json1_1TagKeyList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_json1_1TagList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return serializeAws_json1_1Tag(entry, context);
    });
};
var serializeAws_json1_1TagResourceRequest = function (input, context) {
    return __assign(__assign({}, (input.ResourceArn != null && { ResourceArn: input.ResourceArn })), (input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }));
};
var serializeAws_json1_1TranscriptFilter = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign({}, (input.AbsoluteTimeRange != null && {
        AbsoluteTimeRange: serializeAws_json1_1AbsoluteTimeRange(input.AbsoluteTimeRange, context),
    })), (input.Negate != null && { Negate: input.Negate })), (input.ParticipantRole != null && { ParticipantRole: input.ParticipantRole })), (input.RelativeTimeRange != null && {
        RelativeTimeRange: serializeAws_json1_1RelativeTimeRange(input.RelativeTimeRange, context),
    })), (input.Targets != null && { Targets: serializeAws_json1_1StringTargetList(input.Targets, context) })), (input.TranscriptFilterType != null && { TranscriptFilterType: input.TranscriptFilterType }));
};
var serializeAws_json1_1UntagResourceRequest = function (input, context) {
    return __assign(__assign({}, (input.ResourceArn != null && { ResourceArn: input.ResourceArn })), (input.TagKeys != null && { TagKeys: serializeAws_json1_1TagKeyList(input.TagKeys, context) }));
};
var serializeAws_json1_1UpdateCallAnalyticsCategoryRequest = function (input, context) {
    return __assign(__assign({}, (input.CategoryName != null && { CategoryName: input.CategoryName })), (input.Rules != null && { Rules: serializeAws_json1_1RuleList(input.Rules, context) }));
};
var serializeAws_json1_1UpdateMedicalVocabularyRequest = function (input, context) {
    return __assign(__assign(__assign({}, (input.LanguageCode != null && { LanguageCode: input.LanguageCode })), (input.VocabularyFileUri != null && { VocabularyFileUri: input.VocabularyFileUri })), (input.VocabularyName != null && { VocabularyName: input.VocabularyName }));
};
var serializeAws_json1_1UpdateVocabularyFilterRequest = function (input, context) {
    return __assign(__assign(__assign({}, (input.VocabularyFilterFileUri != null && { VocabularyFilterFileUri: input.VocabularyFilterFileUri })), (input.VocabularyFilterName != null && { VocabularyFilterName: input.VocabularyFilterName })), (input.Words != null && { Words: serializeAws_json1_1Words(input.Words, context) }));
};
var serializeAws_json1_1UpdateVocabularyRequest = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.LanguageCode != null && { LanguageCode: input.LanguageCode })), (input.Phrases != null && { Phrases: serializeAws_json1_1Phrases(input.Phrases, context) })), (input.VocabularyFileUri != null && { VocabularyFileUri: input.VocabularyFileUri })), (input.VocabularyName != null && { VocabularyName: input.VocabularyName }));
};
var serializeAws_json1_1Words = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var deserializeAws_json1_1AbsoluteTimeRange = function (output, context) {
    return {
        EndTime: __expectLong(output.EndTime),
        First: __expectLong(output.First),
        Last: __expectLong(output.Last),
        StartTime: __expectLong(output.StartTime),
    };
};
var deserializeAws_json1_1BadRequestException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1CallAnalyticsJob = function (output, context) {
    return {
        CallAnalyticsJobName: __expectString(output.CallAnalyticsJobName),
        CallAnalyticsJobStatus: __expectString(output.CallAnalyticsJobStatus),
        ChannelDefinitions: output.ChannelDefinitions != null
            ? deserializeAws_json1_1ChannelDefinitions(output.ChannelDefinitions, context)
            : undefined,
        CompletionTime: output.CompletionTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CompletionTime)))
            : undefined,
        CreationTime: output.CreationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTime)))
            : undefined,
        DataAccessRoleArn: __expectString(output.DataAccessRoleArn),
        FailureReason: __expectString(output.FailureReason),
        IdentifiedLanguageScore: __limitedParseFloat32(output.IdentifiedLanguageScore),
        LanguageCode: __expectString(output.LanguageCode),
        Media: output.Media != null ? deserializeAws_json1_1Media(output.Media, context) : undefined,
        MediaFormat: __expectString(output.MediaFormat),
        MediaSampleRateHertz: __expectInt32(output.MediaSampleRateHertz),
        Settings: output.Settings != null ? deserializeAws_json1_1CallAnalyticsJobSettings(output.Settings, context) : undefined,
        StartTime: output.StartTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StartTime))) : undefined,
        Transcript: output.Transcript != null ? deserializeAws_json1_1Transcript(output.Transcript, context) : undefined,
    };
};
var deserializeAws_json1_1CallAnalyticsJobSettings = function (output, context) {
    return {
        ContentRedaction: output.ContentRedaction != null
            ? deserializeAws_json1_1ContentRedaction(output.ContentRedaction, context)
            : undefined,
        LanguageIdSettings: output.LanguageIdSettings != null
            ? deserializeAws_json1_1LanguageIdSettingsMap(output.LanguageIdSettings, context)
            : undefined,
        LanguageModelName: __expectString(output.LanguageModelName),
        LanguageOptions: output.LanguageOptions != null
            ? deserializeAws_json1_1LanguageOptions(output.LanguageOptions, context)
            : undefined,
        VocabularyFilterMethod: __expectString(output.VocabularyFilterMethod),
        VocabularyFilterName: __expectString(output.VocabularyFilterName),
        VocabularyName: __expectString(output.VocabularyName),
    };
};
var deserializeAws_json1_1CallAnalyticsJobSummaries = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CallAnalyticsJobSummary(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1CallAnalyticsJobSummary = function (output, context) {
    return {
        CallAnalyticsJobName: __expectString(output.CallAnalyticsJobName),
        CallAnalyticsJobStatus: __expectString(output.CallAnalyticsJobStatus),
        CompletionTime: output.CompletionTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CompletionTime)))
            : undefined,
        CreationTime: output.CreationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTime)))
            : undefined,
        FailureReason: __expectString(output.FailureReason),
        LanguageCode: __expectString(output.LanguageCode),
        StartTime: output.StartTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StartTime))) : undefined,
    };
};
var deserializeAws_json1_1CategoryProperties = function (output, context) {
    return {
        CategoryName: __expectString(output.CategoryName),
        CreateTime: output.CreateTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreateTime))) : undefined,
        LastUpdateTime: output.LastUpdateTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdateTime)))
            : undefined,
        Rules: output.Rules != null ? deserializeAws_json1_1RuleList(output.Rules, context) : undefined,
    };
};
var deserializeAws_json1_1CategoryPropertiesList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CategoryProperties(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1ChannelDefinition = function (output, context) {
    return {
        ChannelId: __expectInt32(output.ChannelId),
        ParticipantRole: __expectString(output.ParticipantRole),
    };
};
var deserializeAws_json1_1ChannelDefinitions = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ChannelDefinition(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1ConflictException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1ContentRedaction = function (output, context) {
    return {
        PiiEntityTypes: output.PiiEntityTypes != null ? deserializeAws_json1_1PiiEntityTypes(output.PiiEntityTypes, context) : undefined,
        RedactionOutput: __expectString(output.RedactionOutput),
        RedactionType: __expectString(output.RedactionType),
    };
};
var deserializeAws_json1_1CreateCallAnalyticsCategoryResponse = function (output, context) {
    return {
        CategoryProperties: output.CategoryProperties != null
            ? deserializeAws_json1_1CategoryProperties(output.CategoryProperties, context)
            : undefined,
    };
};
var deserializeAws_json1_1CreateLanguageModelResponse = function (output, context) {
    return {
        BaseModelName: __expectString(output.BaseModelName),
        InputDataConfig: output.InputDataConfig != null
            ? deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context)
            : undefined,
        LanguageCode: __expectString(output.LanguageCode),
        ModelName: __expectString(output.ModelName),
        ModelStatus: __expectString(output.ModelStatus),
    };
};
var deserializeAws_json1_1CreateMedicalVocabularyResponse = function (output, context) {
    return {
        FailureReason: __expectString(output.FailureReason),
        LanguageCode: __expectString(output.LanguageCode),
        LastModifiedTime: output.LastModifiedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastModifiedTime)))
            : undefined,
        VocabularyName: __expectString(output.VocabularyName),
        VocabularyState: __expectString(output.VocabularyState),
    };
};
var deserializeAws_json1_1CreateVocabularyFilterResponse = function (output, context) {
    return {
        LanguageCode: __expectString(output.LanguageCode),
        LastModifiedTime: output.LastModifiedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastModifiedTime)))
            : undefined,
        VocabularyFilterName: __expectString(output.VocabularyFilterName),
    };
};
var deserializeAws_json1_1CreateVocabularyResponse = function (output, context) {
    return {
        FailureReason: __expectString(output.FailureReason),
        LanguageCode: __expectString(output.LanguageCode),
        LastModifiedTime: output.LastModifiedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastModifiedTime)))
            : undefined,
        VocabularyName: __expectString(output.VocabularyName),
        VocabularyState: __expectString(output.VocabularyState),
    };
};
var deserializeAws_json1_1DeleteCallAnalyticsCategoryResponse = function (output, context) {
    return {};
};
var deserializeAws_json1_1DeleteCallAnalyticsJobResponse = function (output, context) {
    return {};
};
var deserializeAws_json1_1DescribeLanguageModelResponse = function (output, context) {
    return {
        LanguageModel: output.LanguageModel != null ? deserializeAws_json1_1LanguageModel(output.LanguageModel, context) : undefined,
    };
};
var deserializeAws_json1_1GetCallAnalyticsCategoryResponse = function (output, context) {
    return {
        CategoryProperties: output.CategoryProperties != null
            ? deserializeAws_json1_1CategoryProperties(output.CategoryProperties, context)
            : undefined,
    };
};
var deserializeAws_json1_1GetCallAnalyticsJobResponse = function (output, context) {
    return {
        CallAnalyticsJob: output.CallAnalyticsJob != null
            ? deserializeAws_json1_1CallAnalyticsJob(output.CallAnalyticsJob, context)
            : undefined,
    };
};
var deserializeAws_json1_1GetMedicalTranscriptionJobResponse = function (output, context) {
    return {
        MedicalTranscriptionJob: output.MedicalTranscriptionJob != null
            ? deserializeAws_json1_1MedicalTranscriptionJob(output.MedicalTranscriptionJob, context)
            : undefined,
    };
};
var deserializeAws_json1_1GetMedicalVocabularyResponse = function (output, context) {
    return {
        DownloadUri: __expectString(output.DownloadUri),
        FailureReason: __expectString(output.FailureReason),
        LanguageCode: __expectString(output.LanguageCode),
        LastModifiedTime: output.LastModifiedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastModifiedTime)))
            : undefined,
        VocabularyName: __expectString(output.VocabularyName),
        VocabularyState: __expectString(output.VocabularyState),
    };
};
var deserializeAws_json1_1GetTranscriptionJobResponse = function (output, context) {
    return {
        TranscriptionJob: output.TranscriptionJob != null
            ? deserializeAws_json1_1TranscriptionJob(output.TranscriptionJob, context)
            : undefined,
    };
};
var deserializeAws_json1_1GetVocabularyFilterResponse = function (output, context) {
    return {
        DownloadUri: __expectString(output.DownloadUri),
        LanguageCode: __expectString(output.LanguageCode),
        LastModifiedTime: output.LastModifiedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastModifiedTime)))
            : undefined,
        VocabularyFilterName: __expectString(output.VocabularyFilterName),
    };
};
var deserializeAws_json1_1GetVocabularyResponse = function (output, context) {
    return {
        DownloadUri: __expectString(output.DownloadUri),
        FailureReason: __expectString(output.FailureReason),
        LanguageCode: __expectString(output.LanguageCode),
        LastModifiedTime: output.LastModifiedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastModifiedTime)))
            : undefined,
        VocabularyName: __expectString(output.VocabularyName),
        VocabularyState: __expectString(output.VocabularyState),
    };
};
var deserializeAws_json1_1InputDataConfig = function (output, context) {
    return {
        DataAccessRoleArn: __expectString(output.DataAccessRoleArn),
        S3Uri: __expectString(output.S3Uri),
        TuningDataS3Uri: __expectString(output.TuningDataS3Uri),
    };
};
var deserializeAws_json1_1InternalFailureException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1InterruptionFilter = function (output, context) {
    return {
        AbsoluteTimeRange: output.AbsoluteTimeRange != null
            ? deserializeAws_json1_1AbsoluteTimeRange(output.AbsoluteTimeRange, context)
            : undefined,
        Negate: __expectBoolean(output.Negate),
        ParticipantRole: __expectString(output.ParticipantRole),
        RelativeTimeRange: output.RelativeTimeRange != null
            ? deserializeAws_json1_1RelativeTimeRange(output.RelativeTimeRange, context)
            : undefined,
        Threshold: __expectLong(output.Threshold),
    };
};
var deserializeAws_json1_1JobExecutionSettings = function (output, context) {
    return {
        AllowDeferredExecution: __expectBoolean(output.AllowDeferredExecution),
        DataAccessRoleArn: __expectString(output.DataAccessRoleArn),
    };
};
var deserializeAws_json1_1LanguageCodeItem = function (output, context) {
    return {
        DurationInSeconds: __limitedParseFloat32(output.DurationInSeconds),
        LanguageCode: __expectString(output.LanguageCode),
    };
};
var deserializeAws_json1_1LanguageCodeList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1LanguageCodeItem(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1LanguageIdSettings = function (output, context) {
    return {
        LanguageModelName: __expectString(output.LanguageModelName),
        VocabularyFilterName: __expectString(output.VocabularyFilterName),
        VocabularyName: __expectString(output.VocabularyName),
    };
};
var deserializeAws_json1_1LanguageIdSettingsMap = function (output, context) {
    return Object.entries(output).reduce(function (acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        if (value === null) {
            return acc;
        }
        return __assign(__assign({}, acc), (_b = {}, _b[key] = deserializeAws_json1_1LanguageIdSettings(value, context), _b));
    }, {});
};
var deserializeAws_json1_1LanguageModel = function (output, context) {
    return {
        BaseModelName: __expectString(output.BaseModelName),
        CreateTime: output.CreateTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreateTime))) : undefined,
        FailureReason: __expectString(output.FailureReason),
        InputDataConfig: output.InputDataConfig != null
            ? deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context)
            : undefined,
        LanguageCode: __expectString(output.LanguageCode),
        LastModifiedTime: output.LastModifiedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastModifiedTime)))
            : undefined,
        ModelName: __expectString(output.ModelName),
        ModelStatus: __expectString(output.ModelStatus),
        UpgradeAvailability: __expectBoolean(output.UpgradeAvailability),
    };
};
var deserializeAws_json1_1LanguageOptions = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_json1_1LimitExceededException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1ListCallAnalyticsCategoriesResponse = function (output, context) {
    return {
        Categories: output.Categories != null ? deserializeAws_json1_1CategoryPropertiesList(output.Categories, context) : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
var deserializeAws_json1_1ListCallAnalyticsJobsResponse = function (output, context) {
    return {
        CallAnalyticsJobSummaries: output.CallAnalyticsJobSummaries != null
            ? deserializeAws_json1_1CallAnalyticsJobSummaries(output.CallAnalyticsJobSummaries, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
        Status: __expectString(output.Status),
    };
};
var deserializeAws_json1_1ListLanguageModelsResponse = function (output, context) {
    return {
        Models: output.Models != null ? deserializeAws_json1_1Models(output.Models, context) : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
var deserializeAws_json1_1ListMedicalTranscriptionJobsResponse = function (output, context) {
    return {
        MedicalTranscriptionJobSummaries: output.MedicalTranscriptionJobSummaries != null
            ? deserializeAws_json1_1MedicalTranscriptionJobSummaries(output.MedicalTranscriptionJobSummaries, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
        Status: __expectString(output.Status),
    };
};
var deserializeAws_json1_1ListMedicalVocabulariesResponse = function (output, context) {
    return {
        NextToken: __expectString(output.NextToken),
        Status: __expectString(output.Status),
        Vocabularies: output.Vocabularies != null ? deserializeAws_json1_1Vocabularies(output.Vocabularies, context) : undefined,
    };
};
var deserializeAws_json1_1ListTagsForResourceResponse = function (output, context) {
    return {
        ResourceArn: __expectString(output.ResourceArn),
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : undefined,
    };
};
var deserializeAws_json1_1ListTranscriptionJobsResponse = function (output, context) {
    return {
        NextToken: __expectString(output.NextToken),
        Status: __expectString(output.Status),
        TranscriptionJobSummaries: output.TranscriptionJobSummaries != null
            ? deserializeAws_json1_1TranscriptionJobSummaries(output.TranscriptionJobSummaries, context)
            : undefined,
    };
};
var deserializeAws_json1_1ListVocabulariesResponse = function (output, context) {
    return {
        NextToken: __expectString(output.NextToken),
        Status: __expectString(output.Status),
        Vocabularies: output.Vocabularies != null ? deserializeAws_json1_1Vocabularies(output.Vocabularies, context) : undefined,
    };
};
var deserializeAws_json1_1ListVocabularyFiltersResponse = function (output, context) {
    return {
        NextToken: __expectString(output.NextToken),
        VocabularyFilters: output.VocabularyFilters != null
            ? deserializeAws_json1_1VocabularyFilters(output.VocabularyFilters, context)
            : undefined,
    };
};
var deserializeAws_json1_1Media = function (output, context) {
    return {
        MediaFileUri: __expectString(output.MediaFileUri),
        RedactedMediaFileUri: __expectString(output.RedactedMediaFileUri),
    };
};
var deserializeAws_json1_1MedicalTranscript = function (output, context) {
    return {
        TranscriptFileUri: __expectString(output.TranscriptFileUri),
    };
};
var deserializeAws_json1_1MedicalTranscriptionJob = function (output, context) {
    return {
        CompletionTime: output.CompletionTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CompletionTime)))
            : undefined,
        ContentIdentificationType: __expectString(output.ContentIdentificationType),
        CreationTime: output.CreationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTime)))
            : undefined,
        FailureReason: __expectString(output.FailureReason),
        LanguageCode: __expectString(output.LanguageCode),
        Media: output.Media != null ? deserializeAws_json1_1Media(output.Media, context) : undefined,
        MediaFormat: __expectString(output.MediaFormat),
        MediaSampleRateHertz: __expectInt32(output.MediaSampleRateHertz),
        MedicalTranscriptionJobName: __expectString(output.MedicalTranscriptionJobName),
        Settings: output.Settings != null ? deserializeAws_json1_1MedicalTranscriptionSetting(output.Settings, context) : undefined,
        Specialty: __expectString(output.Specialty),
        StartTime: output.StartTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StartTime))) : undefined,
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : undefined,
        Transcript: output.Transcript != null ? deserializeAws_json1_1MedicalTranscript(output.Transcript, context) : undefined,
        TranscriptionJobStatus: __expectString(output.TranscriptionJobStatus),
        Type: __expectString(output.Type),
    };
};
var deserializeAws_json1_1MedicalTranscriptionJobSummaries = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1MedicalTranscriptionJobSummary(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1MedicalTranscriptionJobSummary = function (output, context) {
    return {
        CompletionTime: output.CompletionTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CompletionTime)))
            : undefined,
        ContentIdentificationType: __expectString(output.ContentIdentificationType),
        CreationTime: output.CreationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTime)))
            : undefined,
        FailureReason: __expectString(output.FailureReason),
        LanguageCode: __expectString(output.LanguageCode),
        MedicalTranscriptionJobName: __expectString(output.MedicalTranscriptionJobName),
        OutputLocationType: __expectString(output.OutputLocationType),
        Specialty: __expectString(output.Specialty),
        StartTime: output.StartTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StartTime))) : undefined,
        TranscriptionJobStatus: __expectString(output.TranscriptionJobStatus),
        Type: __expectString(output.Type),
    };
};
var deserializeAws_json1_1MedicalTranscriptionSetting = function (output, context) {
    return {
        ChannelIdentification: __expectBoolean(output.ChannelIdentification),
        MaxAlternatives: __expectInt32(output.MaxAlternatives),
        MaxSpeakerLabels: __expectInt32(output.MaxSpeakerLabels),
        ShowAlternatives: __expectBoolean(output.ShowAlternatives),
        ShowSpeakerLabels: __expectBoolean(output.ShowSpeakerLabels),
        VocabularyName: __expectString(output.VocabularyName),
    };
};
var deserializeAws_json1_1Models = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1LanguageModel(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1ModelSettings = function (output, context) {
    return {
        LanguageModelName: __expectString(output.LanguageModelName),
    };
};
var deserializeAws_json1_1NonTalkTimeFilter = function (output, context) {
    return {
        AbsoluteTimeRange: output.AbsoluteTimeRange != null
            ? deserializeAws_json1_1AbsoluteTimeRange(output.AbsoluteTimeRange, context)
            : undefined,
        Negate: __expectBoolean(output.Negate),
        RelativeTimeRange: output.RelativeTimeRange != null
            ? deserializeAws_json1_1RelativeTimeRange(output.RelativeTimeRange, context)
            : undefined,
        Threshold: __expectLong(output.Threshold),
    };
};
var deserializeAws_json1_1NotFoundException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1PiiEntityTypes = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_json1_1RelativeTimeRange = function (output, context) {
    return {
        EndPercentage: __expectInt32(output.EndPercentage),
        First: __expectInt32(output.First),
        Last: __expectInt32(output.Last),
        StartPercentage: __expectInt32(output.StartPercentage),
    };
};
var deserializeAws_json1_1Rule = function (output, context) {
    if (output.InterruptionFilter != null) {
        return {
            InterruptionFilter: deserializeAws_json1_1InterruptionFilter(output.InterruptionFilter, context),
        };
    }
    if (output.NonTalkTimeFilter != null) {
        return {
            NonTalkTimeFilter: deserializeAws_json1_1NonTalkTimeFilter(output.NonTalkTimeFilter, context),
        };
    }
    if (output.SentimentFilter != null) {
        return {
            SentimentFilter: deserializeAws_json1_1SentimentFilter(output.SentimentFilter, context),
        };
    }
    if (output.TranscriptFilter != null) {
        return {
            TranscriptFilter: deserializeAws_json1_1TranscriptFilter(output.TranscriptFilter, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
var deserializeAws_json1_1RuleList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Rule(__expectUnion(entry), context);
    });
    return retVal;
};
var deserializeAws_json1_1SentimentFilter = function (output, context) {
    return {
        AbsoluteTimeRange: output.AbsoluteTimeRange != null
            ? deserializeAws_json1_1AbsoluteTimeRange(output.AbsoluteTimeRange, context)
            : undefined,
        Negate: __expectBoolean(output.Negate),
        ParticipantRole: __expectString(output.ParticipantRole),
        RelativeTimeRange: output.RelativeTimeRange != null
            ? deserializeAws_json1_1RelativeTimeRange(output.RelativeTimeRange, context)
            : undefined,
        Sentiments: output.Sentiments != null ? deserializeAws_json1_1SentimentValueList(output.Sentiments, context) : undefined,
    };
};
var deserializeAws_json1_1SentimentValueList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_json1_1Settings = function (output, context) {
    return {
        ChannelIdentification: __expectBoolean(output.ChannelIdentification),
        MaxAlternatives: __expectInt32(output.MaxAlternatives),
        MaxSpeakerLabels: __expectInt32(output.MaxSpeakerLabels),
        ShowAlternatives: __expectBoolean(output.ShowAlternatives),
        ShowSpeakerLabels: __expectBoolean(output.ShowSpeakerLabels),
        VocabularyFilterMethod: __expectString(output.VocabularyFilterMethod),
        VocabularyFilterName: __expectString(output.VocabularyFilterName),
        VocabularyName: __expectString(output.VocabularyName),
    };
};
var deserializeAws_json1_1StartCallAnalyticsJobResponse = function (output, context) {
    return {
        CallAnalyticsJob: output.CallAnalyticsJob != null
            ? deserializeAws_json1_1CallAnalyticsJob(output.CallAnalyticsJob, context)
            : undefined,
    };
};
var deserializeAws_json1_1StartMedicalTranscriptionJobResponse = function (output, context) {
    return {
        MedicalTranscriptionJob: output.MedicalTranscriptionJob != null
            ? deserializeAws_json1_1MedicalTranscriptionJob(output.MedicalTranscriptionJob, context)
            : undefined,
    };
};
var deserializeAws_json1_1StartTranscriptionJobResponse = function (output, context) {
    return {
        TranscriptionJob: output.TranscriptionJob != null
            ? deserializeAws_json1_1TranscriptionJob(output.TranscriptionJob, context)
            : undefined,
    };
};
var deserializeAws_json1_1StringTargetList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_json1_1SubtitleFileUris = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_json1_1SubtitleFormats = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_json1_1SubtitlesOutput = function (output, context) {
    return {
        Formats: output.Formats != null ? deserializeAws_json1_1SubtitleFormats(output.Formats, context) : undefined,
        OutputStartIndex: __expectInt32(output.OutputStartIndex),
        SubtitleFileUris: output.SubtitleFileUris != null
            ? deserializeAws_json1_1SubtitleFileUris(output.SubtitleFileUris, context)
            : undefined,
    };
};
var deserializeAws_json1_1Tag = function (output, context) {
    return {
        Key: __expectString(output.Key),
        Value: __expectString(output.Value),
    };
};
var deserializeAws_json1_1TagList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1TagResourceResponse = function (output, context) {
    return {};
};
var deserializeAws_json1_1Transcript = function (output, context) {
    return {
        RedactedTranscriptFileUri: __expectString(output.RedactedTranscriptFileUri),
        TranscriptFileUri: __expectString(output.TranscriptFileUri),
    };
};
var deserializeAws_json1_1TranscriptFilter = function (output, context) {
    return {
        AbsoluteTimeRange: output.AbsoluteTimeRange != null
            ? deserializeAws_json1_1AbsoluteTimeRange(output.AbsoluteTimeRange, context)
            : undefined,
        Negate: __expectBoolean(output.Negate),
        ParticipantRole: __expectString(output.ParticipantRole),
        RelativeTimeRange: output.RelativeTimeRange != null
            ? deserializeAws_json1_1RelativeTimeRange(output.RelativeTimeRange, context)
            : undefined,
        Targets: output.Targets != null ? deserializeAws_json1_1StringTargetList(output.Targets, context) : undefined,
        TranscriptFilterType: __expectString(output.TranscriptFilterType),
    };
};
var deserializeAws_json1_1TranscriptionJob = function (output, context) {
    return {
        CompletionTime: output.CompletionTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CompletionTime)))
            : undefined,
        ContentRedaction: output.ContentRedaction != null
            ? deserializeAws_json1_1ContentRedaction(output.ContentRedaction, context)
            : undefined,
        CreationTime: output.CreationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTime)))
            : undefined,
        FailureReason: __expectString(output.FailureReason),
        IdentifiedLanguageScore: __limitedParseFloat32(output.IdentifiedLanguageScore),
        IdentifyLanguage: __expectBoolean(output.IdentifyLanguage),
        IdentifyMultipleLanguages: __expectBoolean(output.IdentifyMultipleLanguages),
        JobExecutionSettings: output.JobExecutionSettings != null
            ? deserializeAws_json1_1JobExecutionSettings(output.JobExecutionSettings, context)
            : undefined,
        LanguageCode: __expectString(output.LanguageCode),
        LanguageCodes: output.LanguageCodes != null ? deserializeAws_json1_1LanguageCodeList(output.LanguageCodes, context) : undefined,
        LanguageIdSettings: output.LanguageIdSettings != null
            ? deserializeAws_json1_1LanguageIdSettingsMap(output.LanguageIdSettings, context)
            : undefined,
        LanguageOptions: output.LanguageOptions != null
            ? deserializeAws_json1_1LanguageOptions(output.LanguageOptions, context)
            : undefined,
        Media: output.Media != null ? deserializeAws_json1_1Media(output.Media, context) : undefined,
        MediaFormat: __expectString(output.MediaFormat),
        MediaSampleRateHertz: __expectInt32(output.MediaSampleRateHertz),
        ModelSettings: output.ModelSettings != null ? deserializeAws_json1_1ModelSettings(output.ModelSettings, context) : undefined,
        Settings: output.Settings != null ? deserializeAws_json1_1Settings(output.Settings, context) : undefined,
        StartTime: output.StartTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StartTime))) : undefined,
        Subtitles: output.Subtitles != null ? deserializeAws_json1_1SubtitlesOutput(output.Subtitles, context) : undefined,
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : undefined,
        Transcript: output.Transcript != null ? deserializeAws_json1_1Transcript(output.Transcript, context) : undefined,
        TranscriptionJobName: __expectString(output.TranscriptionJobName),
        TranscriptionJobStatus: __expectString(output.TranscriptionJobStatus),
    };
};
var deserializeAws_json1_1TranscriptionJobSummaries = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TranscriptionJobSummary(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1TranscriptionJobSummary = function (output, context) {
    return {
        CompletionTime: output.CompletionTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CompletionTime)))
            : undefined,
        ContentRedaction: output.ContentRedaction != null
            ? deserializeAws_json1_1ContentRedaction(output.ContentRedaction, context)
            : undefined,
        CreationTime: output.CreationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreationTime)))
            : undefined,
        FailureReason: __expectString(output.FailureReason),
        IdentifiedLanguageScore: __limitedParseFloat32(output.IdentifiedLanguageScore),
        IdentifyLanguage: __expectBoolean(output.IdentifyLanguage),
        IdentifyMultipleLanguages: __expectBoolean(output.IdentifyMultipleLanguages),
        LanguageCode: __expectString(output.LanguageCode),
        LanguageCodes: output.LanguageCodes != null ? deserializeAws_json1_1LanguageCodeList(output.LanguageCodes, context) : undefined,
        ModelSettings: output.ModelSettings != null ? deserializeAws_json1_1ModelSettings(output.ModelSettings, context) : undefined,
        OutputLocationType: __expectString(output.OutputLocationType),
        StartTime: output.StartTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StartTime))) : undefined,
        TranscriptionJobName: __expectString(output.TranscriptionJobName),
        TranscriptionJobStatus: __expectString(output.TranscriptionJobStatus),
    };
};
var deserializeAws_json1_1UntagResourceResponse = function (output, context) {
    return {};
};
var deserializeAws_json1_1UpdateCallAnalyticsCategoryResponse = function (output, context) {
    return {
        CategoryProperties: output.CategoryProperties != null
            ? deserializeAws_json1_1CategoryProperties(output.CategoryProperties, context)
            : undefined,
    };
};
var deserializeAws_json1_1UpdateMedicalVocabularyResponse = function (output, context) {
    return {
        LanguageCode: __expectString(output.LanguageCode),
        LastModifiedTime: output.LastModifiedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastModifiedTime)))
            : undefined,
        VocabularyName: __expectString(output.VocabularyName),
        VocabularyState: __expectString(output.VocabularyState),
    };
};
var deserializeAws_json1_1UpdateVocabularyFilterResponse = function (output, context) {
    return {
        LanguageCode: __expectString(output.LanguageCode),
        LastModifiedTime: output.LastModifiedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastModifiedTime)))
            : undefined,
        VocabularyFilterName: __expectString(output.VocabularyFilterName),
    };
};
var deserializeAws_json1_1UpdateVocabularyResponse = function (output, context) {
    return {
        LanguageCode: __expectString(output.LanguageCode),
        LastModifiedTime: output.LastModifiedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastModifiedTime)))
            : undefined,
        VocabularyName: __expectString(output.VocabularyName),
        VocabularyState: __expectString(output.VocabularyState),
    };
};
var deserializeAws_json1_1Vocabularies = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1VocabularyInfo(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1VocabularyFilterInfo = function (output, context) {
    return {
        LanguageCode: __expectString(output.LanguageCode),
        LastModifiedTime: output.LastModifiedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastModifiedTime)))
            : undefined,
        VocabularyFilterName: __expectString(output.VocabularyFilterName),
    };
};
var deserializeAws_json1_1VocabularyFilters = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1VocabularyFilterInfo(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1VocabularyInfo = function (output, context) {
    return {
        LanguageCode: __expectString(output.LanguageCode),
        LastModifiedTime: output.LastModifiedTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastModifiedTime)))
            : undefined,
        VocabularyName: __expectString(output.VocabularyName),
        VocabularyState: __expectString(output.VocabularyState),
    };
};
var deserializeMetadata = function (output) {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
var buildHttpRpcRequest = function (context, headers, path, resolvedHostname, body) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                contents = {
                    protocol: protocol,
                    hostname: hostname,
                    port: port,
                    method: "POST",
                    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
                    headers: headers,
                };
                if (resolvedHostname !== undefined) {
                    contents.hostname = resolvedHostname;
                }
                if (body !== undefined) {
                    contents.body = body;
                }
                return [2, new __HttpRequest(contents)];
        }
    });
}); };
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
var loadRestJsonErrorCode = function (output, data) {
    var findKey = function (object, key) { return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); }); };
    var sanitizeErrorCode = function (rawValue) {
        var cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
