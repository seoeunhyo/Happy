import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
import { CreateCallAnalyticsCategoryCommandInput, CreateCallAnalyticsCategoryCommandOutput } from "./commands/CreateCallAnalyticsCategoryCommand";
import { CreateLanguageModelCommandInput, CreateLanguageModelCommandOutput } from "./commands/CreateLanguageModelCommand";
import { CreateMedicalVocabularyCommandInput, CreateMedicalVocabularyCommandOutput } from "./commands/CreateMedicalVocabularyCommand";
import { CreateVocabularyCommandInput, CreateVocabularyCommandOutput } from "./commands/CreateVocabularyCommand";
import { CreateVocabularyFilterCommandInput, CreateVocabularyFilterCommandOutput } from "./commands/CreateVocabularyFilterCommand";
import { DeleteCallAnalyticsCategoryCommandInput, DeleteCallAnalyticsCategoryCommandOutput } from "./commands/DeleteCallAnalyticsCategoryCommand";
import { DeleteCallAnalyticsJobCommandInput, DeleteCallAnalyticsJobCommandOutput } from "./commands/DeleteCallAnalyticsJobCommand";
import { DeleteLanguageModelCommandInput, DeleteLanguageModelCommandOutput } from "./commands/DeleteLanguageModelCommand";
import { DeleteMedicalTranscriptionJobCommandInput, DeleteMedicalTranscriptionJobCommandOutput } from "./commands/DeleteMedicalTranscriptionJobCommand";
import { DeleteMedicalVocabularyCommandInput, DeleteMedicalVocabularyCommandOutput } from "./commands/DeleteMedicalVocabularyCommand";
import { DeleteTranscriptionJobCommandInput, DeleteTranscriptionJobCommandOutput } from "./commands/DeleteTranscriptionJobCommand";
import { DeleteVocabularyCommandInput, DeleteVocabularyCommandOutput } from "./commands/DeleteVocabularyCommand";
import { DeleteVocabularyFilterCommandInput, DeleteVocabularyFilterCommandOutput } from "./commands/DeleteVocabularyFilterCommand";
import { DescribeLanguageModelCommandInput, DescribeLanguageModelCommandOutput } from "./commands/DescribeLanguageModelCommand";
import { GetCallAnalyticsCategoryCommandInput, GetCallAnalyticsCategoryCommandOutput } from "./commands/GetCallAnalyticsCategoryCommand";
import { GetCallAnalyticsJobCommandInput, GetCallAnalyticsJobCommandOutput } from "./commands/GetCallAnalyticsJobCommand";
import { GetMedicalTranscriptionJobCommandInput, GetMedicalTranscriptionJobCommandOutput } from "./commands/GetMedicalTranscriptionJobCommand";
import { GetMedicalVocabularyCommandInput, GetMedicalVocabularyCommandOutput } from "./commands/GetMedicalVocabularyCommand";
import { GetTranscriptionJobCommandInput, GetTranscriptionJobCommandOutput } from "./commands/GetTranscriptionJobCommand";
import { GetVocabularyCommandInput, GetVocabularyCommandOutput } from "./commands/GetVocabularyCommand";
import { GetVocabularyFilterCommandInput, GetVocabularyFilterCommandOutput } from "./commands/GetVocabularyFilterCommand";
import { ListCallAnalyticsCategoriesCommandInput, ListCallAnalyticsCategoriesCommandOutput } from "./commands/ListCallAnalyticsCategoriesCommand";
import { ListCallAnalyticsJobsCommandInput, ListCallAnalyticsJobsCommandOutput } from "./commands/ListCallAnalyticsJobsCommand";
import { ListLanguageModelsCommandInput, ListLanguageModelsCommandOutput } from "./commands/ListLanguageModelsCommand";
import { ListMedicalTranscriptionJobsCommandInput, ListMedicalTranscriptionJobsCommandOutput } from "./commands/ListMedicalTranscriptionJobsCommand";
import { ListMedicalVocabulariesCommandInput, ListMedicalVocabulariesCommandOutput } from "./commands/ListMedicalVocabulariesCommand";
import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "./commands/ListTagsForResourceCommand";
import { ListTranscriptionJobsCommandInput, ListTranscriptionJobsCommandOutput } from "./commands/ListTranscriptionJobsCommand";
import { ListVocabulariesCommandInput, ListVocabulariesCommandOutput } from "./commands/ListVocabulariesCommand";
import { ListVocabularyFiltersCommandInput, ListVocabularyFiltersCommandOutput } from "./commands/ListVocabularyFiltersCommand";
import { StartCallAnalyticsJobCommandInput, StartCallAnalyticsJobCommandOutput } from "./commands/StartCallAnalyticsJobCommand";
import { StartMedicalTranscriptionJobCommandInput, StartMedicalTranscriptionJobCommandOutput } from "./commands/StartMedicalTranscriptionJobCommand";
import { StartTranscriptionJobCommandInput, StartTranscriptionJobCommandOutput } from "./commands/StartTranscriptionJobCommand";
import { TagResourceCommandInput, TagResourceCommandOutput } from "./commands/TagResourceCommand";
import { UntagResourceCommandInput, UntagResourceCommandOutput } from "./commands/UntagResourceCommand";
import { UpdateCallAnalyticsCategoryCommandInput, UpdateCallAnalyticsCategoryCommandOutput } from "./commands/UpdateCallAnalyticsCategoryCommand";
import { UpdateMedicalVocabularyCommandInput, UpdateMedicalVocabularyCommandOutput } from "./commands/UpdateMedicalVocabularyCommand";
import { UpdateVocabularyCommandInput, UpdateVocabularyCommandOutput } from "./commands/UpdateVocabularyCommand";
import { UpdateVocabularyFilterCommandInput, UpdateVocabularyFilterCommandOutput } from "./commands/UpdateVocabularyFilterCommand";
import { TranscribeClient } from "./TranscribeClient";
/**
 * <p>Amazon Transcribe offers three main types of batch transcription:
 *             <b>Standard</b>, <b>Medical</b>, and
 *             <b>Call Analytics</b>.</p>
 *         <ul>
 *             <li>
 *                 <p>
 *                   <b>Standard transcriptions</b> are the most common
 *                     option. Refer to  for details.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <b>Medical transcriptions</b> are tailored to medical
 *                     professionals and incorporate medical terms. A common use case for this service is
 *                     transcribing doctor-patient dialogue into after-visit notes. Refer to
 *                      for details.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <b>Call Analytics transcriptions</b> are designed for use
 *                     with call center audio on two different channels; if you're looking for insight into customer
 *                     service calls, use this option. Refer to  for
 *                     details.</p>
 *             </li>
 *          </ul>
 */
export declare class Transcribe extends TranscribeClient {
    /**
     * <p>Creates a new Call Analytics category.</p>
     *         <p>All categories are automatically applied to your Call Analytics jobs. Note that in order to apply
     *             your categories to your jobs, you must create them before submitting your job request, as
     *             categories cannot be applied retroactively.</p>
     *         <p>Call Analytics categories are composed of rules. For each category, you must create
     *             between 1 and 20 rules. Rules can include these parameters: ,
     *             , , and
     *             .</p>
     *         <p>To update an existing category, see .</p>
     *         <p>To learn more about:</p>
     *             <ul>
     *             <li>
     *                     <p>Call Analytics categories, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html">Creating categories</a>
     *                </p>
     *                 </li>
     *             <li>
     *                     <p>Using rules, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html#call-analytics-create-categories-rules">Rule
     *             criteria</a> and refer to the  data type</p>
     *                 </li>
     *             <li>
     *                     <p>Call Analytics, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics.html">Analyzing call center audio with Call
     *             Analytics</a>
     *                </p>
     *                 </li>
     *          </ul>
     */
    createCallAnalyticsCategory(args: CreateCallAnalyticsCategoryCommandInput, options?: __HttpHandlerOptions): Promise<CreateCallAnalyticsCategoryCommandOutput>;
    createCallAnalyticsCategory(args: CreateCallAnalyticsCategoryCommandInput, cb: (err: any, data?: CreateCallAnalyticsCategoryCommandOutput) => void): void;
    createCallAnalyticsCategory(args: CreateCallAnalyticsCategoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCallAnalyticsCategoryCommandOutput) => void): void;
    /**
     * <p>Creates a new custom language model.</p>
     *         <p>When creating a new language model, you must specify:</p>
     *         <ul>
     *             <li>
     *                 <p>If you want a Wideband (audio sample rates over 16,000 Hz) or Narrowband (audio sample
     *                     rates under 16,000 Hz) base model</p>
     *             </li>
     *             <li>
     *                 <p>The location of your training and tuning files (this must be an Amazon S3 URI)</p>
     *             </li>
     *             <li>
     *                 <p>The language of your model</p>
     *             </li>
     *             <li>
     *                 <p>A unique name for your model</p>
     *             </li>
     *          </ul>
     *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-language-models.html">Custom language models</a>.</p>
     */
    createLanguageModel(args: CreateLanguageModelCommandInput, options?: __HttpHandlerOptions): Promise<CreateLanguageModelCommandOutput>;
    createLanguageModel(args: CreateLanguageModelCommandInput, cb: (err: any, data?: CreateLanguageModelCommandOutput) => void): void;
    createLanguageModel(args: CreateLanguageModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLanguageModelCommandOutput) => void): void;
    /**
     * <p>Creates a new custom medical vocabulary.</p>
     *         <p>Prior to creating a new medical vocabulary, you must first upload a text file that contains
     *             your new entries, phrases, and terms into an Amazon S3 bucket. Note that this differs from
     *             , where you can include a list of terms within
     *             your request using the <code>Phrases</code> flag; <code>CreateMedicalVocabulary</code>
     *             does not support the <code>Phrases</code> flag.</p>
     *         <p>Each language has a character set that contains all allowed characters for that specific
     *             language. If you use unsupported characters, your vocabulary request fails. Refer to
     *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for
     *                 Custom Vocabularies</a> to get the character set for your language.</p>
     *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary-create.html">Creating a custom
     *             vocabulary</a>.</p>
     */
    createMedicalVocabulary(args: CreateMedicalVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<CreateMedicalVocabularyCommandOutput>;
    createMedicalVocabulary(args: CreateMedicalVocabularyCommandInput, cb: (err: any, data?: CreateMedicalVocabularyCommandOutput) => void): void;
    createMedicalVocabulary(args: CreateMedicalVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateMedicalVocabularyCommandOutput) => void): void;
    /**
     * <p>Creates a new custom vocabulary.</p>
     *         <p>When creating a new vocabulary, you can either upload a text file that contains your new
     *             entries, phrases, and terms into an Amazon S3 bucket and include the URI in your request, or
     *             you can include a list of terms directly in your request using the <code>Phrases</code> flag.</p>
     *         <p>Each language has a character set that contains all allowed characters for that specific
     *             language. If you use unsupported characters, your vocabulary request fails. Refer to
     *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for
     *                 Custom Vocabularies</a> to get the character set for your language.</p>
     *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary-create.html">Creating a custom
     *                 vocabulary</a>.</p>
     */
    createVocabulary(args: CreateVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<CreateVocabularyCommandOutput>;
    createVocabulary(args: CreateVocabularyCommandInput, cb: (err: any, data?: CreateVocabularyCommandOutput) => void): void;
    createVocabulary(args: CreateVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateVocabularyCommandOutput) => void): void;
    /**
     * <p>Creates a new custom vocabulary filter.</p>
     *         <p>You can use vocabulary filters to mask, delete, or flag specific words from your transcript.
     *             Vocabulary filters are commonly used to mask profanity in transcripts.</p>
     *         <p>Each language has a character set that contains all allowed characters for that specific
     *             language. If you use unsupported characters, your vocabulary filter request fails. Refer to
     *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for
     *                 Custom Vocabularies</a> to get the character set for your language.</p>
     *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/vocabulary-filtering.html">Using vocabulary filtering with unwanted
     *             words</a>.</p>
     */
    createVocabularyFilter(args: CreateVocabularyFilterCommandInput, options?: __HttpHandlerOptions): Promise<CreateVocabularyFilterCommandOutput>;
    createVocabularyFilter(args: CreateVocabularyFilterCommandInput, cb: (err: any, data?: CreateVocabularyFilterCommandOutput) => void): void;
    createVocabularyFilter(args: CreateVocabularyFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateVocabularyFilterCommandOutput) => void): void;
    /**
     * <p>Deletes a Call Analytics category. To use this operation, specify the name of the category
     *             you want to delete using <code>CategoryName</code>. Category names are case
     *             sensitive.</p>
     */
    deleteCallAnalyticsCategory(args: DeleteCallAnalyticsCategoryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCallAnalyticsCategoryCommandOutput>;
    deleteCallAnalyticsCategory(args: DeleteCallAnalyticsCategoryCommandInput, cb: (err: any, data?: DeleteCallAnalyticsCategoryCommandOutput) => void): void;
    deleteCallAnalyticsCategory(args: DeleteCallAnalyticsCategoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCallAnalyticsCategoryCommandOutput) => void): void;
    /**
     * <p>Deletes a Call Analytics job. To use this operation, specify the name of the job you want to
     *             delete using <code>CallAnalyticsJobName</code>. Job names are case sensitive.</p>
     */
    deleteCallAnalyticsJob(args: DeleteCallAnalyticsJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCallAnalyticsJobCommandOutput>;
    deleteCallAnalyticsJob(args: DeleteCallAnalyticsJobCommandInput, cb: (err: any, data?: DeleteCallAnalyticsJobCommandOutput) => void): void;
    deleteCallAnalyticsJob(args: DeleteCallAnalyticsJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCallAnalyticsJobCommandOutput) => void): void;
    /**
     * <p>Deletes a custom language model. To use this operation, specify the name of the language
     *             model you want to delete using <code>ModelName</code>. Language model names are case
     *             sensitive.</p>
     */
    deleteLanguageModel(args: DeleteLanguageModelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLanguageModelCommandOutput>;
    deleteLanguageModel(args: DeleteLanguageModelCommandInput, cb: (err: any, data?: DeleteLanguageModelCommandOutput) => void): void;
    deleteLanguageModel(args: DeleteLanguageModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLanguageModelCommandOutput) => void): void;
    /**
     * <p>Deletes a medical transcription job. To use this operation, specify the name of the job you
     *             want to delete using <code>MedicalTranscriptionJobName</code>. Job names are case
     *             sensitive.</p>
     */
    deleteMedicalTranscriptionJob(args: DeleteMedicalTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMedicalTranscriptionJobCommandOutput>;
    deleteMedicalTranscriptionJob(args: DeleteMedicalTranscriptionJobCommandInput, cb: (err: any, data?: DeleteMedicalTranscriptionJobCommandOutput) => void): void;
    deleteMedicalTranscriptionJob(args: DeleteMedicalTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMedicalTranscriptionJobCommandOutput) => void): void;
    /**
     * <p>Deletes a custom medical vocabulary. To use this operation, specify the name of the
     *             vocabulary you want to delete using <code>VocabularyName</code>. Vocabulary names are
     *             case sensitive.</p>
     */
    deleteMedicalVocabulary(args: DeleteMedicalVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMedicalVocabularyCommandOutput>;
    deleteMedicalVocabulary(args: DeleteMedicalVocabularyCommandInput, cb: (err: any, data?: DeleteMedicalVocabularyCommandOutput) => void): void;
    deleteMedicalVocabulary(args: DeleteMedicalVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMedicalVocabularyCommandOutput) => void): void;
    /**
     * <p>Deletes a transcription job. To use this operation, specify the name of the job you want to
     *             delete using <code>TranscriptionJobName</code>. Job names are case sensitive.</p>
     */
    deleteTranscriptionJob(args: DeleteTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTranscriptionJobCommandOutput>;
    deleteTranscriptionJob(args: DeleteTranscriptionJobCommandInput, cb: (err: any, data?: DeleteTranscriptionJobCommandOutput) => void): void;
    deleteTranscriptionJob(args: DeleteTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTranscriptionJobCommandOutput) => void): void;
    /**
     * <p>Deletes a custom vocabulary. To use this operation, specify the name of the vocabulary you
     *             want to delete using <code>VocabularyName</code>. Vocabulary names are case
     *             sensitive.</p>
     */
    deleteVocabulary(args: DeleteVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteVocabularyCommandOutput>;
    deleteVocabulary(args: DeleteVocabularyCommandInput, cb: (err: any, data?: DeleteVocabularyCommandOutput) => void): void;
    deleteVocabulary(args: DeleteVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteVocabularyCommandOutput) => void): void;
    /**
     * <p>Deletes a vocabulary filter. To use this operation, specify the name of the vocabulary filter
     *             you want to delete using <code>VocabularyFilterName</code>. Vocabulary filter names are
     *             case sensitive.</p>
     */
    deleteVocabularyFilter(args: DeleteVocabularyFilterCommandInput, options?: __HttpHandlerOptions): Promise<DeleteVocabularyFilterCommandOutput>;
    deleteVocabularyFilter(args: DeleteVocabularyFilterCommandInput, cb: (err: any, data?: DeleteVocabularyFilterCommandOutput) => void): void;
    deleteVocabularyFilter(args: DeleteVocabularyFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteVocabularyFilterCommandOutput) => void): void;
    /**
     * <p>Provides information about the specified custom language model.</p>
     *         <p>This operation also shows if the base language model you used to create your custom
     *             language model has been updated. If Amazon Transcribe has updated the base model, you
     *             can create a new custom language model using the updated base model.</p>
     *         <p>If you tried to create a new custom language model and the request wasn't successful,
     *             you can use <code>DescribeLanguageModel</code> to help identify the reason for this
     *             failure.</p>
     *         <p>To get a list of your custom language models, use the
     *              operation.</p>
     */
    describeLanguageModel(args: DescribeLanguageModelCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLanguageModelCommandOutput>;
    describeLanguageModel(args: DescribeLanguageModelCommandInput, cb: (err: any, data?: DescribeLanguageModelCommandOutput) => void): void;
    describeLanguageModel(args: DescribeLanguageModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLanguageModelCommandOutput) => void): void;
    /**
     * <p>Provides information about the specified Call Analytics category.</p>
     *         <p>To get a list of your Call Analytics categories, use the
     *              operation.</p>
     */
    getCallAnalyticsCategory(args: GetCallAnalyticsCategoryCommandInput, options?: __HttpHandlerOptions): Promise<GetCallAnalyticsCategoryCommandOutput>;
    getCallAnalyticsCategory(args: GetCallAnalyticsCategoryCommandInput, cb: (err: any, data?: GetCallAnalyticsCategoryCommandOutput) => void): void;
    getCallAnalyticsCategory(args: GetCallAnalyticsCategoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCallAnalyticsCategoryCommandOutput) => void): void;
    /**
     * <p>Provides information about the specified Call Analytics job.</p>
     *         <p>To view the job's status, refer to <code>CallAnalyticsJobStatus</code>. If the status is
     *             <code>COMPLETED</code>, the job is finished. You can find your completed transcript at
     *             the URI specified in <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>,
     *             <code>FailureReason</code> provides details on why your transcription job failed.</p>
     *         <p>If you enabled personally identifiable information (PII) redaction, the redacted transcript
     *             appears at the location specified in <code>RedactedTranscriptFileUri</code>.</p>
     *          <p>If you chose to redact the audio in your media file, you can find your redacted media file
     *            at the location specified in <code>RedactedMediaFileUri</code>.</p>
     *         <p>To get a list of your Call Analytics jobs, use the
     *             operation.</p>
     */
    getCallAnalyticsJob(args: GetCallAnalyticsJobCommandInput, options?: __HttpHandlerOptions): Promise<GetCallAnalyticsJobCommandOutput>;
    getCallAnalyticsJob(args: GetCallAnalyticsJobCommandInput, cb: (err: any, data?: GetCallAnalyticsJobCommandOutput) => void): void;
    getCallAnalyticsJob(args: GetCallAnalyticsJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCallAnalyticsJobCommandOutput) => void): void;
    /**
     * <p>Provides information about the specified medical transcription job.</p>
     *         <p>To view the status of the specified medical transcription job, check the
     *             <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the
     *             job is finished and you can find the results at the location specified in
     *             <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>,
     *             <code>FailureReason</code> provides details on why your transcription job failed.</p>
     *         <p>To get a list of your medical transcription jobs, use the
     *              operation.</p>
     */
    getMedicalTranscriptionJob(args: GetMedicalTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<GetMedicalTranscriptionJobCommandOutput>;
    getMedicalTranscriptionJob(args: GetMedicalTranscriptionJobCommandInput, cb: (err: any, data?: GetMedicalTranscriptionJobCommandOutput) => void): void;
    getMedicalTranscriptionJob(args: GetMedicalTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMedicalTranscriptionJobCommandOutput) => void): void;
    /**
     * <p>Provides information about the specified custom medical vocabulary.</p>
     *         <p>To view the status of the specified medical vocabulary, check the
     *             <code>VocabularyState</code> field. If the status is <code>READY</code>, your vocabulary
     *             is available to use. If the status is <code>FAILED</code>, <code>FailureReason</code> provides
     *             details on why your vocabulary failed.</p>
     *         <p>To get a list of your custom medical vocabularies, use the
     *              operation.</p>
     */
    getMedicalVocabulary(args: GetMedicalVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<GetMedicalVocabularyCommandOutput>;
    getMedicalVocabulary(args: GetMedicalVocabularyCommandInput, cb: (err: any, data?: GetMedicalVocabularyCommandOutput) => void): void;
    getMedicalVocabulary(args: GetMedicalVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMedicalVocabularyCommandOutput) => void): void;
    /**
     * <p>Provides information about the specified transcription job.</p>
     *         <p>To view the status of the specified transcription job, check the
     *             <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the
     *             job is finished and you can find the results at the location specified in
     *             <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>,
     *             <code>FailureReason</code> provides details on why your transcription job failed.</p>
     *         <p>If you enabled content redaction, the redacted transcript
     *             can be found at the location specified in <code>RedactedTranscriptFileUri</code>.</p>
     *         <p>To get a list of your transcription jobs, use the
     *             operation.</p>
     */
    getTranscriptionJob(args: GetTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<GetTranscriptionJobCommandOutput>;
    getTranscriptionJob(args: GetTranscriptionJobCommandInput, cb: (err: any, data?: GetTranscriptionJobCommandOutput) => void): void;
    getTranscriptionJob(args: GetTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTranscriptionJobCommandOutput) => void): void;
    /**
     * <p>Provides information about the specified custom vocabulary.</p>
     *         <p>To view the status of the specified vocabulary, check the <code>VocabularyState</code>
     *             field. If the status is <code>READY</code>, your vocabulary is available to use. If the status
     *             is <code>FAILED</code>, <code>FailureReason</code> provides details on why your
     *             vocabulary failed.</p>
     *         <p>To get a list of your custom vocabularies, use the
     *             operation.</p>
     */
    getVocabulary(args: GetVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<GetVocabularyCommandOutput>;
    getVocabulary(args: GetVocabularyCommandInput, cb: (err: any, data?: GetVocabularyCommandOutput) => void): void;
    getVocabulary(args: GetVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetVocabularyCommandOutput) => void): void;
    /**
     * <p>Provides information about the specified custom vocabulary filter.</p>
     *         <p>To view the status of the specified vocabulary filter, check the <code>VocabularyState</code>
     *             field. If the status is <code>READY</code>, your vocabulary is available to use. If the status is
     *             <code>FAILED</code>, <code>FailureReason</code> provides details on why your vocabulary
     *             filter failed.</p>
     *         <p>To get a list of your custom vocabulary filters, use the
     *              operation.</p>
     */
    getVocabularyFilter(args: GetVocabularyFilterCommandInput, options?: __HttpHandlerOptions): Promise<GetVocabularyFilterCommandOutput>;
    getVocabularyFilter(args: GetVocabularyFilterCommandInput, cb: (err: any, data?: GetVocabularyFilterCommandOutput) => void): void;
    getVocabularyFilter(args: GetVocabularyFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetVocabularyFilterCommandOutput) => void): void;
    /**
     * <p>Provides a list of Call Analytics categories, including all rules that make up each category.</p>
     *         <p>To get detailed information about a specific Call Analytics category, use the
     *              operation.</p>
     */
    listCallAnalyticsCategories(args: ListCallAnalyticsCategoriesCommandInput, options?: __HttpHandlerOptions): Promise<ListCallAnalyticsCategoriesCommandOutput>;
    listCallAnalyticsCategories(args: ListCallAnalyticsCategoriesCommandInput, cb: (err: any, data?: ListCallAnalyticsCategoriesCommandOutput) => void): void;
    listCallAnalyticsCategories(args: ListCallAnalyticsCategoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCallAnalyticsCategoriesCommandOutput) => void): void;
    /**
     * <p>Provides a list of Call Analytics jobs that match the specified criteria. If no criteria are
     *             specified, all Call Analytics jobs are returned.</p>
     *         <p>To get detailed information about a specific Call Analytics job, use the
     *              operation.</p>
     */
    listCallAnalyticsJobs(args: ListCallAnalyticsJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListCallAnalyticsJobsCommandOutput>;
    listCallAnalyticsJobs(args: ListCallAnalyticsJobsCommandInput, cb: (err: any, data?: ListCallAnalyticsJobsCommandOutput) => void): void;
    listCallAnalyticsJobs(args: ListCallAnalyticsJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCallAnalyticsJobsCommandOutput) => void): void;
    /**
     * <p>Provides a list of custom language models that match the specified criteria. If no criteria
     *             are specified, all language models are returned.</p>
     *         <p>To get detailed information about a specific custom language model, use the
     *              operation.</p>
     */
    listLanguageModels(args: ListLanguageModelsCommandInput, options?: __HttpHandlerOptions): Promise<ListLanguageModelsCommandOutput>;
    listLanguageModels(args: ListLanguageModelsCommandInput, cb: (err: any, data?: ListLanguageModelsCommandOutput) => void): void;
    listLanguageModels(args: ListLanguageModelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLanguageModelsCommandOutput) => void): void;
    /**
     * <p>Provides a list of medical transcription jobs that match the specified criteria. If no criteria are
     *             specified, all medical transcription jobs are returned.</p>
     *         <p>To get detailed information about a specific medical transcription job, use the
     *              operation.</p>
     */
    listMedicalTranscriptionJobs(args: ListMedicalTranscriptionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListMedicalTranscriptionJobsCommandOutput>;
    listMedicalTranscriptionJobs(args: ListMedicalTranscriptionJobsCommandInput, cb: (err: any, data?: ListMedicalTranscriptionJobsCommandOutput) => void): void;
    listMedicalTranscriptionJobs(args: ListMedicalTranscriptionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMedicalTranscriptionJobsCommandOutput) => void): void;
    /**
     * <p>Provides a list of custom medical vocabularies that match the specified criteria. If no
     *             criteria are specified, all custom medical vocabularies are returned.</p>
     *         <p>To get detailed information about a specific custom medical vocabulary, use the
     *              operation.</p>
     */
    listMedicalVocabularies(args: ListMedicalVocabulariesCommandInput, options?: __HttpHandlerOptions): Promise<ListMedicalVocabulariesCommandOutput>;
    listMedicalVocabularies(args: ListMedicalVocabulariesCommandInput, cb: (err: any, data?: ListMedicalVocabulariesCommandOutput) => void): void;
    listMedicalVocabularies(args: ListMedicalVocabulariesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMedicalVocabulariesCommandOutput) => void): void;
    /**
     * <p>Lists all tags associated with the specified transcription job, vocabulary, model, or
     *             resource.</p>
     *         <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
     */
    listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
    listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    /**
     * <p>Provides a list of transcription jobs that match the specified criteria. If no criteria are
     *             specified, all transcription jobs are returned.</p>
     *         <p>To get detailed information about a specific transcription job, use the
     *              operation.</p>
     */
    listTranscriptionJobs(args: ListTranscriptionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListTranscriptionJobsCommandOutput>;
    listTranscriptionJobs(args: ListTranscriptionJobsCommandInput, cb: (err: any, data?: ListTranscriptionJobsCommandOutput) => void): void;
    listTranscriptionJobs(args: ListTranscriptionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTranscriptionJobsCommandOutput) => void): void;
    /**
     * <p>Provides a list of custom vocabularies that match the specified criteria. If no criteria are
     *             specified, all custom vocabularies are returned.</p>
     *         <p>To get detailed information about a specific custom vocabulary, use the
     *              operation.</p>
     */
    listVocabularies(args: ListVocabulariesCommandInput, options?: __HttpHandlerOptions): Promise<ListVocabulariesCommandOutput>;
    listVocabularies(args: ListVocabulariesCommandInput, cb: (err: any, data?: ListVocabulariesCommandOutput) => void): void;
    listVocabularies(args: ListVocabulariesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListVocabulariesCommandOutput) => void): void;
    /**
     * <p>Provides a list of custom vocabulary filters that match the specified criteria. If no
     *             criteria are specified, all custom vocabularies are returned.</p>
     *         <p>To get detailed information about a specific custom vocabulary filter, use the
     *              operation.</p>
     */
    listVocabularyFilters(args: ListVocabularyFiltersCommandInput, options?: __HttpHandlerOptions): Promise<ListVocabularyFiltersCommandOutput>;
    listVocabularyFilters(args: ListVocabularyFiltersCommandInput, cb: (err: any, data?: ListVocabularyFiltersCommandOutput) => void): void;
    listVocabularyFilters(args: ListVocabularyFiltersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListVocabularyFiltersCommandOutput) => void): void;
    /**
     * <p>Transcribes the audio from a customer service call and applies any additional Request
     *             Parameters you choose to include in your request.</p>
     *         <p>In addition to many of the standard transcription features, Call Analytics provides you with
     *             call characteristics, call summarization, speaker sentiment, and optional redaction of your text
     *             transcript and your audio file. You can also apply custom categories to flag specified conditions. To
     *             learn more about these features and insights, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics.html">Analyzing call center audio with Call
     *                 Analytics</a>.</p>
     *         <p>If you want to apply categories to your Call Analytics job, you must create them
     *             before submitting your job request. Categories cannot be retroactively applied to a job. To
     *             create a new category, use the  operation.
     *             To learn more about Call Analytics categories, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics-create-categories.html">Creating
     *                 categories</a>.</p>
     *         <p>To make a <code>StartCallAnalyticsJob</code> request, you must first upload your media file
     *             into an Amazon S3 bucket; you can then specify the Amazon S3 location of the file
     *             using the <code>Media</code> parameter.</p>
     *         <p>You must include the following parameters in your <code>StartCallAnalyticsJob</code>
     *             request:</p>
     *         <ul>
     *             <li>
     *                 <p>
     *                   <code>region</code>: The Amazon Web Services Region where you are making your
     *                     request. For a list of Amazon Web Services Regions supported with Amazon Transcribe, refer
     *                     to <a href="https://docs.aws.amazon.com/general/latest/gr/transcribe.html">Amazon Transcribe
     *                         endpoints and quotas</a>.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>CallAnalyticsJobName</code>: A custom name you create for your transcription job
     *                     that is unique within your Amazon Web Services account.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>DataAccessRoleArn</code>: The Amazon Resource Name (ARN) of an IAM role that
     *                     has permissions to access the Amazon S3 bucket that contains your input files.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>Media</code> (<code>MediaFileUri</code> or <code>RedactedMediaFileUri</code>):
     *                     The Amazon S3 location of your media file.</p>
     *             </li>
     *          </ul>
     *         <note>
     *             <p>With Call Analytics, you can redact the audio contained in your media file by including
     *                 <code>RedactedMediaFileUri</code>, instead of <code>MediaFileUri</code>, to specify the
     *                 location of your input audio. If you choose to redact your audio, you can find your redacted
     *                 media at the location specified in the <code>RedactedMediaFileUri</code> field of your
     *                 response.</p>
     *         </note>
     */
    startCallAnalyticsJob(args: StartCallAnalyticsJobCommandInput, options?: __HttpHandlerOptions): Promise<StartCallAnalyticsJobCommandOutput>;
    startCallAnalyticsJob(args: StartCallAnalyticsJobCommandInput, cb: (err: any, data?: StartCallAnalyticsJobCommandOutput) => void): void;
    startCallAnalyticsJob(args: StartCallAnalyticsJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartCallAnalyticsJobCommandOutput) => void): void;
    /**
     * <p>Transcribes the audio from a medical dictation or conversation and applies any additional
     *             Request Parameters you choose to include in your request.</p>
     *         <p>In addition to many of the standard transcription features, Amazon Transcribe Medical provides
     *             you with a robust medical vocabulary and, optionally, content identification, which adds flags to
     *             personal health information (PHI). To learn more about these features, refer to
     *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works-med.html">How
     *                 Amazon Transcribe Medical works</a>.</p>
     *         <p>To make a <code>StartMedicalTranscriptionJob</code> request, you must first upload your media
     *             file into an Amazon S3 bucket; you can then specify the S3 location of the file using the
     *             <code>Media</code> parameter.</p>
     *         <p>You must include the following parameters in your <code>StartMedicalTranscriptionJob</code>
     *             request:</p>
     *         <ul>
     *             <li>
     *                 <p>
     *                   <code>region</code>: The Amazon Web Services Region where you are making your
     *                     request. For a list of Amazon Web Services Regions supported with Amazon Transcribe, refer
     *                     to <a href="https://docs.aws.amazon.com/general/latest/gr/transcribe.html">Amazon Transcribe
     *                         endpoints and quotas</a>.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>MedicalTranscriptionJobName</code>: A custom name you create for your
     *                     transcription job that is unique within your Amazon Web Services account.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>Media</code> (<code>MediaFileUri</code>): The Amazon S3 location of
     *                     your media file.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>LanguageCode</code>: This must be <code>en-US</code>.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>OutputBucketName</code>: The Amazon S3 bucket where you want
     *                     your transcript stored. If you want your output stored in a sub-folder of this bucket, you must
     *                     also include <code>OutputKey</code>.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>Specialty</code>: This must be <code>PRIMARYCARE</code>.</p>
     *             </li>
     *             <li>
     *                 <p>
     *                   <code>Type</code>: Choose whether your audio is a conversation or a dictation.</p>
     *             </li>
     *          </ul>
     */
    startMedicalTranscriptionJob(args: StartMedicalTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartMedicalTranscriptionJobCommandOutput>;
    startMedicalTranscriptionJob(args: StartMedicalTranscriptionJobCommandInput, cb: (err: any, data?: StartMedicalTranscriptionJobCommandOutput) => void): void;
    startMedicalTranscriptionJob(args: StartMedicalTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartMedicalTranscriptionJobCommandOutput) => void): void;
    /**
     * <p>Transcribes the audio from a media file and applies any additional Request Parameters you
     *             choose to include in your request.</p>
     *         <p>To make a <code>StartTranscriptionJob</code> request, you must first upload your media file
     *             into an Amazon S3 bucket; you can then specify the Amazon S3 location of the file
     *             using the <code>Media</code> parameter.</p>
     *             <p>You must include the following parameters in your <code>StartTranscriptionJob</code>
     *                 request:</p>
     *             <ul>
     *             <li>
     *                     <p>
     *                   <code>region</code>: The Amazon Web Services Region where you are making your
     *                         request. For a list of Amazon Web Services Regions supported with Amazon Transcribe, refer
     *                         to <a href="https://docs.aws.amazon.com/general/latest/gr/transcribe.html">Amazon Transcribe
     *                             endpoints and quotas</a>.</p>
     *                 </li>
     *             <li>
     *                     <p>
     *                   <code>TranscriptionJobName</code>: A custom name you create for your transcription
     *                         job that is unique within your Amazon Web Services account.</p>
     *                 </li>
     *             <li>
     *                     <p>
     *                   <code>Media</code> (<code>MediaFileUri</code>): The Amazon S3 location of
     *                         your media file.</p>
     *                 </li>
     *             <li>
     *                     <p>One of <code>LanguageCode</code>, <code>IdentifyLanguage</code>, or
     *                         <code>IdentifyMultipleLanguages</code>: If you know the language of your media file,
     *                         specify it using the <code>LanguageCode</code> parameter; you can find all valid language
     *                         codes in the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table.
     *                         If you don't know the languages spoken in your media, use either
     *                         <code>IdentifyLanguage</code> or <code>IdentifyMultipleLanguages</code> and let
     *                         Amazon Transcribe identify the languages for you.</p>
     *                 </li>
     *          </ul>
     */
    startTranscriptionJob(args: StartTranscriptionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartTranscriptionJobCommandOutput>;
    startTranscriptionJob(args: StartTranscriptionJobCommandInput, cb: (err: any, data?: StartTranscriptionJobCommandOutput) => void): void;
    startTranscriptionJob(args: StartTranscriptionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartTranscriptionJobCommandOutput) => void): void;
    /**
     * <p>Adds one or more custom tags, each in the form of a key:value pair, to the specified
     *             resource.</p>
     *         <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
     */
    tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
    tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    /**
     * <p>Removes the specified tags from the specified Amazon Transcribe resource.</p>
     *         <p>If you include <code>UntagResource</code> in your request, you must also include
     *             <code>ResourceArn</code> and <code>TagKeys</code>.</p>
     */
    untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
    untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    /**
     * <p>Updates the specified Call Analytics category with new rules. Note that the
     *             <code>UpdateCallAnalyticsCategory</code> operation overwrites all existing rules contained in
     *             the specified category. You cannot append additional rules onto an existing category.</p>
     *         <p>To create a new category, see .</p>
     */
    updateCallAnalyticsCategory(args: UpdateCallAnalyticsCategoryCommandInput, options?: __HttpHandlerOptions): Promise<UpdateCallAnalyticsCategoryCommandOutput>;
    updateCallAnalyticsCategory(args: UpdateCallAnalyticsCategoryCommandInput, cb: (err: any, data?: UpdateCallAnalyticsCategoryCommandOutput) => void): void;
    updateCallAnalyticsCategory(args: UpdateCallAnalyticsCategoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateCallAnalyticsCategoryCommandOutput) => void): void;
    /**
     * <p>Updates an existing custom medical vocabulary with new values. This operation overwrites
     *             all existing information with your new values; you cannot append new terms onto an existing
     *             vocabulary.</p>
     */
    updateMedicalVocabulary(args: UpdateMedicalVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMedicalVocabularyCommandOutput>;
    updateMedicalVocabulary(args: UpdateMedicalVocabularyCommandInput, cb: (err: any, data?: UpdateMedicalVocabularyCommandOutput) => void): void;
    updateMedicalVocabulary(args: UpdateMedicalVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMedicalVocabularyCommandOutput) => void): void;
    /**
     * <p>Updates an existing custom vocabulary with new values. This operation overwrites all existing
     *             information with your new values; you cannot append new terms onto an existing vocabulary.</p>
     */
    updateVocabulary(args: UpdateVocabularyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateVocabularyCommandOutput>;
    updateVocabulary(args: UpdateVocabularyCommandInput, cb: (err: any, data?: UpdateVocabularyCommandOutput) => void): void;
    updateVocabulary(args: UpdateVocabularyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateVocabularyCommandOutput) => void): void;
    /**
     * <p>Updates an existing custom vocabulary filter with a new list of words. The new list you provide
     *             overwrites all previous entries; you cannot append new terms onto an existing vocabulary
     *             filter.</p>
     */
    updateVocabularyFilter(args: UpdateVocabularyFilterCommandInput, options?: __HttpHandlerOptions): Promise<UpdateVocabularyFilterCommandOutput>;
    updateVocabularyFilter(args: UpdateVocabularyFilterCommandInput, cb: (err: any, data?: UpdateVocabularyFilterCommandOutput) => void): void;
    updateVocabularyFilter(args: UpdateVocabularyFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateVocabularyFilterCommandOutput) => void): void;
}
