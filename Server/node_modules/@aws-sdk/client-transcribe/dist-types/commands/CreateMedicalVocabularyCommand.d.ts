import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { CreateMedicalVocabularyRequest, CreateMedicalVocabularyResponse } from "../models/models_0";
import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "../TranscribeClient";
export interface CreateMedicalVocabularyCommandInput extends CreateMedicalVocabularyRequest {
}
export interface CreateMedicalVocabularyCommandOutput extends CreateMedicalVocabularyResponse, __MetadataBearer {
}
/**
 * <p>Creates a new custom medical vocabulary.</p>
 *         <p>Prior to creating a new medical vocabulary, you must first upload a text file that contains
 *             your new entries, phrases, and terms into an Amazon S3 bucket. Note that this differs from
 *             , where you can include a list of terms within
 *             your request using the <code>Phrases</code> flag; <code>CreateMedicalVocabulary</code>
 *             does not support the <code>Phrases</code> flag.</p>
 *         <p>Each language has a character set that contains all allowed characters for that specific
 *             language. If you use unsupported characters, your vocabulary request fails. Refer to
 *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for
 *                 Custom Vocabularies</a> to get the character set for your language.</p>
 *         <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary-create.html">Creating a custom
 *             vocabulary</a>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { TranscribeClient, CreateMedicalVocabularyCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
 * // const { TranscribeClient, CreateMedicalVocabularyCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
 * const client = new TranscribeClient(config);
 * const command = new CreateMedicalVocabularyCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link CreateMedicalVocabularyCommandInput} for command's `input` shape.
 * @see {@link CreateMedicalVocabularyCommandOutput} for command's `response` shape.
 * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
 *
 */
export declare class CreateMedicalVocabularyCommand extends $Command<CreateMedicalVocabularyCommandInput, CreateMedicalVocabularyCommandOutput, TranscribeClientResolvedConfig> {
    readonly input: CreateMedicalVocabularyCommandInput;
    constructor(input: CreateMedicalVocabularyCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateMedicalVocabularyCommandInput, CreateMedicalVocabularyCommandOutput>;
    private serialize;
    private deserialize;
}
