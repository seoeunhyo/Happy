import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { GetVocabularyFilterRequest, GetVocabularyFilterResponse } from "../models/models_0";
import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "../TranscribeClient";
export interface GetVocabularyFilterCommandInput extends GetVocabularyFilterRequest {
}
export interface GetVocabularyFilterCommandOutput extends GetVocabularyFilterResponse, __MetadataBearer {
}
/**
 * <p>Provides information about the specified custom vocabulary filter.</p>
 *         <p>To view the status of the specified vocabulary filter, check the <code>VocabularyState</code>
 *             field. If the status is <code>READY</code>, your vocabulary is available to use. If the status is
 *             <code>FAILED</code>, <code>FailureReason</code> provides details on why your vocabulary
 *             filter failed.</p>
 *         <p>To get a list of your custom vocabulary filters, use the
 *              operation.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { TranscribeClient, GetVocabularyFilterCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
 * // const { TranscribeClient, GetVocabularyFilterCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
 * const client = new TranscribeClient(config);
 * const command = new GetVocabularyFilterCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link GetVocabularyFilterCommandInput} for command's `input` shape.
 * @see {@link GetVocabularyFilterCommandOutput} for command's `response` shape.
 * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
 *
 */
export declare class GetVocabularyFilterCommand extends $Command<GetVocabularyFilterCommandInput, GetVocabularyFilterCommandOutput, TranscribeClientResolvedConfig> {
    readonly input: GetVocabularyFilterCommandInput;
    constructor(input: GetVocabularyFilterCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetVocabularyFilterCommandInput, GetVocabularyFilterCommandOutput>;
    private serialize;
    private deserialize;
}
