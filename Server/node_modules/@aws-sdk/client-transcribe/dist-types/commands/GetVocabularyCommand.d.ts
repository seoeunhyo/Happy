import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { GetVocabularyRequest, GetVocabularyResponse } from "../models/models_0";
import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "../TranscribeClient";
export interface GetVocabularyCommandInput extends GetVocabularyRequest {
}
export interface GetVocabularyCommandOutput extends GetVocabularyResponse, __MetadataBearer {
}
/**
 * <p>Provides information about the specified custom vocabulary.</p>
 *         <p>To view the status of the specified vocabulary, check the <code>VocabularyState</code>
 *             field. If the status is <code>READY</code>, your vocabulary is available to use. If the status
 *             is <code>FAILED</code>, <code>FailureReason</code> provides details on why your
 *             vocabulary failed.</p>
 *         <p>To get a list of your custom vocabularies, use the
 *             operation.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { TranscribeClient, GetVocabularyCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
 * // const { TranscribeClient, GetVocabularyCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
 * const client = new TranscribeClient(config);
 * const command = new GetVocabularyCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link GetVocabularyCommandInput} for command's `input` shape.
 * @see {@link GetVocabularyCommandOutput} for command's `response` shape.
 * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
 *
 */
export declare class GetVocabularyCommand extends $Command<GetVocabularyCommandInput, GetVocabularyCommandOutput, TranscribeClientResolvedConfig> {
    readonly input: GetVocabularyCommandInput;
    constructor(input: GetVocabularyCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetVocabularyCommandInput, GetVocabularyCommandOutput>;
    private serialize;
    private deserialize;
}
