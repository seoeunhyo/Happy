import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { StartTranscriptionJobRequest, StartTranscriptionJobResponse } from "../models/models_0";
import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "../TranscribeClient";
export interface StartTranscriptionJobCommandInput extends StartTranscriptionJobRequest {
}
export interface StartTranscriptionJobCommandOutput extends StartTranscriptionJobResponse, __MetadataBearer {
}
/**
 * <p>Transcribes the audio from a media file and applies any additional Request Parameters you
 *             choose to include in your request.</p>
 *         <p>To make a <code>StartTranscriptionJob</code> request, you must first upload your media file
 *             into an Amazon S3 bucket; you can then specify the Amazon S3 location of the file
 *             using the <code>Media</code> parameter.</p>
 *             <p>You must include the following parameters in your <code>StartTranscriptionJob</code>
 *                 request:</p>
 *             <ul>
 *             <li>
 *                     <p>
 *                   <code>region</code>: The Amazon Web Services Region where you are making your
 *                         request. For a list of Amazon Web Services Regions supported with Amazon Transcribe, refer
 *                         to <a href="https://docs.aws.amazon.com/general/latest/gr/transcribe.html">Amazon Transcribe
 *                             endpoints and quotas</a>.</p>
 *                 </li>
 *             <li>
 *                     <p>
 *                   <code>TranscriptionJobName</code>: A custom name you create for your transcription
 *                         job that is unique within your Amazon Web Services account.</p>
 *                 </li>
 *             <li>
 *                     <p>
 *                   <code>Media</code> (<code>MediaFileUri</code>): The Amazon S3 location of
 *                         your media file.</p>
 *                 </li>
 *             <li>
 *                     <p>One of <code>LanguageCode</code>, <code>IdentifyLanguage</code>, or
 *                         <code>IdentifyMultipleLanguages</code>: If you know the language of your media file,
 *                         specify it using the <code>LanguageCode</code> parameter; you can find all valid language
 *                         codes in the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table.
 *                         If you don't know the languages spoken in your media, use either
 *                         <code>IdentifyLanguage</code> or <code>IdentifyMultipleLanguages</code> and let
 *                         Amazon Transcribe identify the languages for you.</p>
 *                 </li>
 *          </ul>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { TranscribeClient, StartTranscriptionJobCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
 * // const { TranscribeClient, StartTranscriptionJobCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
 * const client = new TranscribeClient(config);
 * const command = new StartTranscriptionJobCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link StartTranscriptionJobCommandInput} for command's `input` shape.
 * @see {@link StartTranscriptionJobCommandOutput} for command's `response` shape.
 * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
 *
 */
export declare class StartTranscriptionJobCommand extends $Command<StartTranscriptionJobCommandInput, StartTranscriptionJobCommandOutput, TranscribeClientResolvedConfig> {
    readonly input: StartTranscriptionJobCommandInput;
    constructor(input: StartTranscriptionJobCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartTranscriptionJobCommandInput, StartTranscriptionJobCommandOutput>;
    private serialize;
    private deserialize;
}
