import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { DescribeLanguageModelRequest, DescribeLanguageModelResponse } from "../models/models_0";
import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "../TranscribeClient";
export interface DescribeLanguageModelCommandInput extends DescribeLanguageModelRequest {
}
export interface DescribeLanguageModelCommandOutput extends DescribeLanguageModelResponse, __MetadataBearer {
}
/**
 * <p>Provides information about the specified custom language model.</p>
 *         <p>This operation also shows if the base language model you used to create your custom
 *             language model has been updated. If Amazon Transcribe has updated the base model, you
 *             can create a new custom language model using the updated base model.</p>
 *         <p>If you tried to create a new custom language model and the request wasn't successful,
 *             you can use <code>DescribeLanguageModel</code> to help identify the reason for this
 *             failure.</p>
 *         <p>To get a list of your custom language models, use the
 *              operation.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { TranscribeClient, DescribeLanguageModelCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
 * // const { TranscribeClient, DescribeLanguageModelCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
 * const client = new TranscribeClient(config);
 * const command = new DescribeLanguageModelCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link DescribeLanguageModelCommandInput} for command's `input` shape.
 * @see {@link DescribeLanguageModelCommandOutput} for command's `response` shape.
 * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
 *
 */
export declare class DescribeLanguageModelCommand extends $Command<DescribeLanguageModelCommandInput, DescribeLanguageModelCommandOutput, TranscribeClientResolvedConfig> {
    readonly input: DescribeLanguageModelCommandInput;
    constructor(input: DescribeLanguageModelCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLanguageModelCommandInput, DescribeLanguageModelCommandOutput>;
    private serialize;
    private deserialize;
}
