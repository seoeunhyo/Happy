import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { StartMedicalTranscriptionJobRequest, StartMedicalTranscriptionJobResponse } from "../models/models_0";
import { ServiceInputTypes, ServiceOutputTypes, TranscribeClientResolvedConfig } from "../TranscribeClient";
export interface StartMedicalTranscriptionJobCommandInput extends StartMedicalTranscriptionJobRequest {
}
export interface StartMedicalTranscriptionJobCommandOutput extends StartMedicalTranscriptionJobResponse, __MetadataBearer {
}
/**
 * <p>Transcribes the audio from a medical dictation or conversation and applies any additional
 *             Request Parameters you choose to include in your request.</p>
 *         <p>In addition to many of the standard transcription features, Amazon Transcribe Medical provides
 *             you with a robust medical vocabulary and, optionally, content identification, which adds flags to
 *             personal health information (PHI). To learn more about these features, refer to
 *             <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works-med.html">How
 *                 Amazon Transcribe Medical works</a>.</p>
 *         <p>To make a <code>StartMedicalTranscriptionJob</code> request, you must first upload your media
 *             file into an Amazon S3 bucket; you can then specify the S3 location of the file using the
 *             <code>Media</code> parameter.</p>
 *         <p>You must include the following parameters in your <code>StartMedicalTranscriptionJob</code>
 *             request:</p>
 *         <ul>
 *             <li>
 *                 <p>
 *                   <code>region</code>: The Amazon Web Services Region where you are making your
 *                     request. For a list of Amazon Web Services Regions supported with Amazon Transcribe, refer
 *                     to <a href="https://docs.aws.amazon.com/general/latest/gr/transcribe.html">Amazon Transcribe
 *                         endpoints and quotas</a>.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>MedicalTranscriptionJobName</code>: A custom name you create for your
 *                     transcription job that is unique within your Amazon Web Services account.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>Media</code> (<code>MediaFileUri</code>): The Amazon S3 location of
 *                     your media file.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>LanguageCode</code>: This must be <code>en-US</code>.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>OutputBucketName</code>: The Amazon S3 bucket where you want
 *                     your transcript stored. If you want your output stored in a sub-folder of this bucket, you must
 *                     also include <code>OutputKey</code>.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>Specialty</code>: This must be <code>PRIMARYCARE</code>.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>Type</code>: Choose whether your audio is a conversation or a dictation.</p>
 *             </li>
 *          </ul>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { TranscribeClient, StartMedicalTranscriptionJobCommand } from "@aws-sdk/client-transcribe"; // ES Modules import
 * // const { TranscribeClient, StartMedicalTranscriptionJobCommand } = require("@aws-sdk/client-transcribe"); // CommonJS import
 * const client = new TranscribeClient(config);
 * const command = new StartMedicalTranscriptionJobCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link StartMedicalTranscriptionJobCommandInput} for command's `input` shape.
 * @see {@link StartMedicalTranscriptionJobCommandOutput} for command's `response` shape.
 * @see {@link TranscribeClientResolvedConfig | config} for TranscribeClient's `config` shape.
 *
 */
export declare class StartMedicalTranscriptionJobCommand extends $Command<StartMedicalTranscriptionJobCommandInput, StartMedicalTranscriptionJobCommandOutput, TranscribeClientResolvedConfig> {
    readonly input: StartMedicalTranscriptionJobCommandInput;
    constructor(input: StartMedicalTranscriptionJobCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TranscribeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartMedicalTranscriptionJobCommandInput, StartMedicalTranscriptionJobCommandOutput>;
    private serialize;
    private deserialize;
}
