import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { TranscribeServiceException as __BaseException } from "./TranscribeServiceException";

export interface AbsoluteTimeRange {
    
    StartTime?: number;
    
    EndTime?: number;
    
    First?: number;
    
    Last?: number;
}

export declare class BadRequestException extends __BaseException {
    readonly name: "BadRequestException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
}
export declare enum BaseModelName {
    NARROW_BAND = "NarrowBand",
    WIDE_BAND = "WideBand"
}
export declare enum CallAnalyticsJobStatus {
    COMPLETED = "COMPLETED",
    FAILED = "FAILED",
    IN_PROGRESS = "IN_PROGRESS",
    QUEUED = "QUEUED"
}
export declare enum ParticipantRole {
    AGENT = "AGENT",
    CUSTOMER = "CUSTOMER"
}

export interface ChannelDefinition {
    
    ChannelId?: number;
    
    ParticipantRole?: ParticipantRole | string;
}
export declare enum LanguageCode {
    AF_ZA = "af-ZA",
    AR_AE = "ar-AE",
    AR_SA = "ar-SA",
    DA_DK = "da-DK",
    DE_CH = "de-CH",
    DE_DE = "de-DE",
    EN_AB = "en-AB",
    EN_AU = "en-AU",
    EN_GB = "en-GB",
    EN_IE = "en-IE",
    EN_IN = "en-IN",
    EN_NZ = "en-NZ",
    EN_US = "en-US",
    EN_WL = "en-WL",
    EN_ZA = "en-ZA",
    ES_ES = "es-ES",
    ES_US = "es-US",
    FA_IR = "fa-IR",
    FR_CA = "fr-CA",
    FR_FR = "fr-FR",
    HE_IL = "he-IL",
    HI_IN = "hi-IN",
    ID_ID = "id-ID",
    IT_IT = "it-IT",
    JA_JP = "ja-JP",
    KO_KR = "ko-KR",
    MS_MY = "ms-MY",
    NL_NL = "nl-NL",
    PT_BR = "pt-BR",
    PT_PT = "pt-PT",
    RU_RU = "ru-RU",
    TA_IN = "ta-IN",
    TE_IN = "te-IN",
    TH_TH = "th-TH",
    TR_TR = "tr-TR",
    ZH_CN = "zh-CN",
    ZH_TW = "zh-TW"
}

export interface Media {
    
    MediaFileUri?: string;
    
    RedactedMediaFileUri?: string;
}
export declare enum MediaFormat {
    AMR = "amr",
    FLAC = "flac",
    MP3 = "mp3",
    MP4 = "mp4",
    OGG = "ogg",
    WAV = "wav",
    WEBM = "webm"
}
export declare enum PiiEntityType {
    ADDRESS = "ADDRESS",
    ALL = "ALL",
    BANK_ACCOUNT_NUMBER = "BANK_ACCOUNT_NUMBER",
    BANK_ROUTING = "BANK_ROUTING",
    CREDIT_DEBIT_CVV = "CREDIT_DEBIT_CVV",
    CREDIT_DEBIT_EXPIRY = "CREDIT_DEBIT_EXPIRY",
    CREDIT_DEBIT_NUMBER = "CREDIT_DEBIT_NUMBER",
    EMAIL = "EMAIL",
    NAME = "NAME",
    PHONE = "PHONE",
    PIN = "PIN",
    SSN = "SSN"
}
export declare enum RedactionOutput {
    REDACTED = "redacted",
    REDACTED_AND_UNREDACTED = "redacted_and_unredacted"
}
export declare enum RedactionType {
    PII = "PII"
}

export interface ContentRedaction {
    
    RedactionType: RedactionType | string | undefined;
    
    RedactionOutput: RedactionOutput | string | undefined;
    
    PiiEntityTypes?: (PiiEntityType | string)[];
}

export interface LanguageIdSettings {
    
    VocabularyName?: string;
    
    VocabularyFilterName?: string;
    
    LanguageModelName?: string;
}
export declare enum VocabularyFilterMethod {
    MASK = "mask",
    REMOVE = "remove",
    TAG = "tag"
}

export interface CallAnalyticsJobSettings {
    
    VocabularyName?: string;
    
    VocabularyFilterName?: string;
    
    VocabularyFilterMethod?: VocabularyFilterMethod | string;
    
    LanguageModelName?: string;
    
    ContentRedaction?: ContentRedaction;
    
    LanguageOptions?: (LanguageCode | string)[];
    
    LanguageIdSettings?: Record<string, LanguageIdSettings>;
}

export interface Transcript {
    
    TranscriptFileUri?: string;
    
    RedactedTranscriptFileUri?: string;
}

export interface CallAnalyticsJob {
    
    CallAnalyticsJobName?: string;
    
    CallAnalyticsJobStatus?: CallAnalyticsJobStatus | string;
    
    LanguageCode?: LanguageCode | string;
    
    MediaSampleRateHertz?: number;
    
    MediaFormat?: MediaFormat | string;
    
    Media?: Media;
    
    Transcript?: Transcript;
    
    StartTime?: Date;
    
    CreationTime?: Date;
    
    CompletionTime?: Date;
    
    FailureReason?: string;
    
    DataAccessRoleArn?: string;
    
    IdentifiedLanguageScore?: number;
    
    Settings?: CallAnalyticsJobSettings;
    
    ChannelDefinitions?: ChannelDefinition[];
}

export interface CallAnalyticsJobSummary {
    
    CallAnalyticsJobName?: string;
    
    CreationTime?: Date;
    
    StartTime?: Date;
    
    CompletionTime?: Date;
    
    LanguageCode?: LanguageCode | string;
    
    CallAnalyticsJobStatus?: CallAnalyticsJobStatus | string;
    
    FailureReason?: string;
}

export interface RelativeTimeRange {
    
    StartPercentage?: number;
    
    EndPercentage?: number;
    
    First?: number;
    
    Last?: number;
}

export interface InterruptionFilter {
    
    Threshold?: number;
    
    ParticipantRole?: ParticipantRole | string;
    
    AbsoluteTimeRange?: AbsoluteTimeRange;
    
    RelativeTimeRange?: RelativeTimeRange;
    
    Negate?: boolean;
}

export interface NonTalkTimeFilter {
    
    Threshold?: number;
    
    AbsoluteTimeRange?: AbsoluteTimeRange;
    
    RelativeTimeRange?: RelativeTimeRange;
    
    Negate?: boolean;
}
export declare enum SentimentValue {
    MIXED = "MIXED",
    NEGATIVE = "NEGATIVE",
    NEUTRAL = "NEUTRAL",
    POSITIVE = "POSITIVE"
}

export interface SentimentFilter {
    
    Sentiments: (SentimentValue | string)[] | undefined;
    
    AbsoluteTimeRange?: AbsoluteTimeRange;
    
    RelativeTimeRange?: RelativeTimeRange;
    
    ParticipantRole?: ParticipantRole | string;
    
    Negate?: boolean;
}
export declare enum TranscriptFilterType {
    EXACT = "EXACT"
}

export interface TranscriptFilter {
    
    TranscriptFilterType: TranscriptFilterType | string | undefined;
    
    AbsoluteTimeRange?: AbsoluteTimeRange;
    
    RelativeTimeRange?: RelativeTimeRange;
    
    ParticipantRole?: ParticipantRole | string;
    
    Negate?: boolean;
    
    Targets: string[] | undefined;
}

export declare type Rule = Rule.InterruptionFilterMember | Rule.NonTalkTimeFilterMember | Rule.SentimentFilterMember | Rule.TranscriptFilterMember | Rule.$UnknownMember;
export declare namespace Rule {
    
    interface NonTalkTimeFilterMember {
        NonTalkTimeFilter: NonTalkTimeFilter;
        InterruptionFilter?: never;
        TranscriptFilter?: never;
        SentimentFilter?: never;
        $unknown?: never;
    }
    
    interface InterruptionFilterMember {
        NonTalkTimeFilter?: never;
        InterruptionFilter: InterruptionFilter;
        TranscriptFilter?: never;
        SentimentFilter?: never;
        $unknown?: never;
    }
    
    interface TranscriptFilterMember {
        NonTalkTimeFilter?: never;
        InterruptionFilter?: never;
        TranscriptFilter: TranscriptFilter;
        SentimentFilter?: never;
        $unknown?: never;
    }
    
    interface SentimentFilterMember {
        NonTalkTimeFilter?: never;
        InterruptionFilter?: never;
        TranscriptFilter?: never;
        SentimentFilter: SentimentFilter;
        $unknown?: never;
    }
    interface $UnknownMember {
        NonTalkTimeFilter?: never;
        InterruptionFilter?: never;
        TranscriptFilter?: never;
        SentimentFilter?: never;
        $unknown: [
            string,
            any
        ];
    }
    interface Visitor<T> {
        NonTalkTimeFilter: (value: NonTalkTimeFilter) => T;
        InterruptionFilter: (value: InterruptionFilter) => T;
        TranscriptFilter: (value: TranscriptFilter) => T;
        SentimentFilter: (value: SentimentFilter) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: Rule, visitor: Visitor<T>) => T;
}

export interface CategoryProperties {
    
    CategoryName?: string;
    
    Rules?: Rule[];
    
    CreateTime?: Date;
    
    LastUpdateTime?: Date;
}
export declare enum CLMLanguageCode {
    EN_AU = "en-AU",
    EN_GB = "en-GB",
    EN_US = "en-US",
    ES_US = "es-US",
    HI_IN = "hi-IN"
}

export declare class ConflictException extends __BaseException {
    readonly name: "ConflictException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface CreateCallAnalyticsCategoryRequest {
    
    CategoryName: string | undefined;
    
    Rules: Rule[] | undefined;
}
export interface CreateCallAnalyticsCategoryResponse {
    
    CategoryProperties?: CategoryProperties;
}

export declare class InternalFailureException extends __BaseException {
    readonly name: "InternalFailureException";
    readonly $fault: "server";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<InternalFailureException, __BaseException>);
}

export declare class LimitExceededException extends __BaseException {
    readonly name: "LimitExceededException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
}

export interface InputDataConfig {
    
    S3Uri: string | undefined;
    
    TuningDataS3Uri?: string;
    
    DataAccessRoleArn: string | undefined;
}

export interface Tag {
    
    Key: string | undefined;
    
    Value: string | undefined;
}
export interface CreateLanguageModelRequest {
    
    LanguageCode: CLMLanguageCode | string | undefined;
    
    BaseModelName: BaseModelName | string | undefined;
    
    ModelName: string | undefined;
    
    InputDataConfig: InputDataConfig | undefined;
    
    Tags?: Tag[];
}
export declare enum ModelStatus {
    COMPLETED = "COMPLETED",
    FAILED = "FAILED",
    IN_PROGRESS = "IN_PROGRESS"
}
export interface CreateLanguageModelResponse {
    
    LanguageCode?: CLMLanguageCode | string;
    
    BaseModelName?: BaseModelName | string;
    
    ModelName?: string;
    
    InputDataConfig?: InputDataConfig;
    
    ModelStatus?: ModelStatus | string;
}
export interface CreateMedicalVocabularyRequest {
    
    VocabularyName: string | undefined;
    
    LanguageCode: LanguageCode | string | undefined;
    
    VocabularyFileUri: string | undefined;
    
    Tags?: Tag[];
}
export declare enum VocabularyState {
    FAILED = "FAILED",
    PENDING = "PENDING",
    READY = "READY"
}
export interface CreateMedicalVocabularyResponse {
    
    VocabularyName?: string;
    
    LanguageCode?: LanguageCode | string;
    
    VocabularyState?: VocabularyState | string;
    
    LastModifiedTime?: Date;
    
    FailureReason?: string;
}
export interface CreateVocabularyRequest {
    
    VocabularyName: string | undefined;
    
    LanguageCode: LanguageCode | string | undefined;
    
    Phrases?: string[];
    
    VocabularyFileUri?: string;
    
    Tags?: Tag[];
}
export interface CreateVocabularyResponse {
    
    VocabularyName?: string;
    
    LanguageCode?: LanguageCode | string;
    
    VocabularyState?: VocabularyState | string;
    
    LastModifiedTime?: Date;
    
    FailureReason?: string;
}
export interface CreateVocabularyFilterRequest {
    
    VocabularyFilterName: string | undefined;
    
    LanguageCode: LanguageCode | string | undefined;
    
    Words?: string[];
    
    VocabularyFilterFileUri?: string;
    
    Tags?: Tag[];
}
export interface CreateVocabularyFilterResponse {
    
    VocabularyFilterName?: string;
    
    LanguageCode?: LanguageCode | string;
    
    LastModifiedTime?: Date;
}
export interface DeleteCallAnalyticsCategoryRequest {
    
    CategoryName: string | undefined;
}
export interface DeleteCallAnalyticsCategoryResponse {
}

export declare class NotFoundException extends __BaseException {
    readonly name: "NotFoundException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export interface DeleteCallAnalyticsJobRequest {
    
    CallAnalyticsJobName: string | undefined;
}
export interface DeleteCallAnalyticsJobResponse {
}
export interface DeleteLanguageModelRequest {
    
    ModelName: string | undefined;
}
export interface DeleteMedicalTranscriptionJobRequest {
    
    MedicalTranscriptionJobName: string | undefined;
}
export interface DeleteMedicalVocabularyRequest {
    
    VocabularyName: string | undefined;
}
export interface DeleteTranscriptionJobRequest {
    
    TranscriptionJobName: string | undefined;
}
export interface DeleteVocabularyRequest {
    
    VocabularyName: string | undefined;
}
export interface DeleteVocabularyFilterRequest {
    
    VocabularyFilterName: string | undefined;
}
export interface DescribeLanguageModelRequest {
    
    ModelName: string | undefined;
}

export interface LanguageModel {
    
    ModelName?: string;
    
    CreateTime?: Date;
    
    LastModifiedTime?: Date;
    
    LanguageCode?: CLMLanguageCode | string;
    
    BaseModelName?: BaseModelName | string;
    
    ModelStatus?: ModelStatus | string;
    
    UpgradeAvailability?: boolean;
    
    FailureReason?: string;
    
    InputDataConfig?: InputDataConfig;
}
export interface DescribeLanguageModelResponse {
    
    LanguageModel?: LanguageModel;
}
export interface GetCallAnalyticsCategoryRequest {
    
    CategoryName: string | undefined;
}
export interface GetCallAnalyticsCategoryResponse {
    
    CategoryProperties?: CategoryProperties;
}
export interface GetCallAnalyticsJobRequest {
    
    CallAnalyticsJobName: string | undefined;
}
export interface GetCallAnalyticsJobResponse {
    
    CallAnalyticsJob?: CallAnalyticsJob;
}
export interface GetMedicalTranscriptionJobRequest {
    
    MedicalTranscriptionJobName: string | undefined;
}
export declare enum MedicalContentIdentificationType {
    PHI = "PHI"
}

export interface MedicalTranscriptionSetting {
    
    ShowSpeakerLabels?: boolean;
    
    MaxSpeakerLabels?: number;
    
    ChannelIdentification?: boolean;
    
    ShowAlternatives?: boolean;
    
    MaxAlternatives?: number;
    
    VocabularyName?: string;
}
export declare enum Specialty {
    PRIMARYCARE = "PRIMARYCARE"
}

export interface MedicalTranscript {
    
    TranscriptFileUri?: string;
}
export declare enum TranscriptionJobStatus {
    COMPLETED = "COMPLETED",
    FAILED = "FAILED",
    IN_PROGRESS = "IN_PROGRESS",
    QUEUED = "QUEUED"
}
export declare enum Type {
    CONVERSATION = "CONVERSATION",
    DICTATION = "DICTATION"
}

export interface MedicalTranscriptionJob {
    
    MedicalTranscriptionJobName?: string;
    
    TranscriptionJobStatus?: TranscriptionJobStatus | string;
    
    LanguageCode?: LanguageCode | string;
    
    MediaSampleRateHertz?: number;
    
    MediaFormat?: MediaFormat | string;
    
    Media?: Media;
    
    Transcript?: MedicalTranscript;
    
    StartTime?: Date;
    
    CreationTime?: Date;
    
    CompletionTime?: Date;
    
    FailureReason?: string;
    
    Settings?: MedicalTranscriptionSetting;
    
    ContentIdentificationType?: MedicalContentIdentificationType | string;
    
    Specialty?: Specialty | string;
    
    Type?: Type | string;
    
    Tags?: Tag[];
}
export interface GetMedicalTranscriptionJobResponse {
    
    MedicalTranscriptionJob?: MedicalTranscriptionJob;
}
export interface GetMedicalVocabularyRequest {
    
    VocabularyName: string | undefined;
}
export interface GetMedicalVocabularyResponse {
    
    VocabularyName?: string;
    
    LanguageCode?: LanguageCode | string;
    
    VocabularyState?: VocabularyState | string;
    
    LastModifiedTime?: Date;
    
    FailureReason?: string;
    
    DownloadUri?: string;
}
export interface GetTranscriptionJobRequest {
    
    TranscriptionJobName: string | undefined;
}

export interface JobExecutionSettings {
    
    AllowDeferredExecution?: boolean;
    
    DataAccessRoleArn?: string;
}

export interface LanguageCodeItem {
    
    LanguageCode?: LanguageCode | string;
    
    DurationInSeconds?: number;
}

export interface ModelSettings {
    
    LanguageModelName?: string;
}

export interface Settings {
    
    VocabularyName?: string;
    
    ShowSpeakerLabels?: boolean;
    
    MaxSpeakerLabels?: number;
    
    ChannelIdentification?: boolean;
    
    ShowAlternatives?: boolean;
    
    MaxAlternatives?: number;
    
    VocabularyFilterName?: string;
    
    VocabularyFilterMethod?: VocabularyFilterMethod | string;
}
export declare enum SubtitleFormat {
    SRT = "srt",
    VTT = "vtt"
}

export interface SubtitlesOutput {
    
    Formats?: (SubtitleFormat | string)[];
    
    SubtitleFileUris?: string[];
    
    OutputStartIndex?: number;
}

export interface TranscriptionJob {
    
    TranscriptionJobName?: string;
    
    TranscriptionJobStatus?: TranscriptionJobStatus | string;
    
    LanguageCode?: LanguageCode | string;
    
    MediaSampleRateHertz?: number;
    
    MediaFormat?: MediaFormat | string;
    
    Media?: Media;
    
    Transcript?: Transcript;
    
    StartTime?: Date;
    
    CreationTime?: Date;
    
    CompletionTime?: Date;
    
    FailureReason?: string;
    
    Settings?: Settings;
    
    ModelSettings?: ModelSettings;
    
    JobExecutionSettings?: JobExecutionSettings;
    
    ContentRedaction?: ContentRedaction;
    
    IdentifyLanguage?: boolean;
    
    IdentifyMultipleLanguages?: boolean;
    
    LanguageOptions?: (LanguageCode | string)[];
    
    IdentifiedLanguageScore?: number;
    
    LanguageCodes?: LanguageCodeItem[];
    
    Tags?: Tag[];
    
    Subtitles?: SubtitlesOutput;
    
    LanguageIdSettings?: Record<string, LanguageIdSettings>;
}
export interface GetTranscriptionJobResponse {
    
    TranscriptionJob?: TranscriptionJob;
}
export interface GetVocabularyRequest {
    
    VocabularyName: string | undefined;
}
export interface GetVocabularyResponse {
    
    VocabularyName?: string;
    
    LanguageCode?: LanguageCode | string;
    
    VocabularyState?: VocabularyState | string;
    
    LastModifiedTime?: Date;
    
    FailureReason?: string;
    
    DownloadUri?: string;
}
export interface GetVocabularyFilterRequest {
    
    VocabularyFilterName: string | undefined;
}
export interface GetVocabularyFilterResponse {
    
    VocabularyFilterName?: string;
    
    LanguageCode?: LanguageCode | string;
    
    LastModifiedTime?: Date;
    
    DownloadUri?: string;
}
export interface ListCallAnalyticsCategoriesRequest {
    
    NextToken?: string;
    
    MaxResults?: number;
}
export interface ListCallAnalyticsCategoriesResponse {
    
    NextToken?: string;
    
    Categories?: CategoryProperties[];
}
export interface ListCallAnalyticsJobsRequest {
    
    Status?: CallAnalyticsJobStatus | string;
    
    JobNameContains?: string;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export interface ListCallAnalyticsJobsResponse {
    
    Status?: CallAnalyticsJobStatus | string;
    
    NextToken?: string;
    
    CallAnalyticsJobSummaries?: CallAnalyticsJobSummary[];
}
export interface ListLanguageModelsRequest {
    
    StatusEquals?: ModelStatus | string;
    
    NameContains?: string;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export interface ListLanguageModelsResponse {
    
    NextToken?: string;
    
    Models?: LanguageModel[];
}
export interface ListMedicalTranscriptionJobsRequest {
    
    Status?: TranscriptionJobStatus | string;
    
    JobNameContains?: string;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare enum OutputLocationType {
    CUSTOMER_BUCKET = "CUSTOMER_BUCKET",
    SERVICE_BUCKET = "SERVICE_BUCKET"
}

export interface MedicalTranscriptionJobSummary {
    
    MedicalTranscriptionJobName?: string;
    
    CreationTime?: Date;
    
    StartTime?: Date;
    
    CompletionTime?: Date;
    
    LanguageCode?: LanguageCode | string;
    
    TranscriptionJobStatus?: TranscriptionJobStatus | string;
    
    FailureReason?: string;
    
    OutputLocationType?: OutputLocationType | string;
    
    Specialty?: Specialty | string;
    
    ContentIdentificationType?: MedicalContentIdentificationType | string;
    
    Type?: Type | string;
}
export interface ListMedicalTranscriptionJobsResponse {
    
    Status?: TranscriptionJobStatus | string;
    
    NextToken?: string;
    
    MedicalTranscriptionJobSummaries?: MedicalTranscriptionJobSummary[];
}
export interface ListMedicalVocabulariesRequest {
    
    NextToken?: string;
    
    MaxResults?: number;
    
    StateEquals?: VocabularyState | string;
    
    NameContains?: string;
}

export interface VocabularyInfo {
    
    VocabularyName?: string;
    
    LanguageCode?: LanguageCode | string;
    
    LastModifiedTime?: Date;
    
    VocabularyState?: VocabularyState | string;
}
export interface ListMedicalVocabulariesResponse {
    
    Status?: VocabularyState | string;
    
    NextToken?: string;
    
    Vocabularies?: VocabularyInfo[];
}
export interface ListTagsForResourceRequest {
    
    ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
    
    ResourceArn?: string;
    
    Tags?: Tag[];
}
export interface ListTranscriptionJobsRequest {
    
    Status?: TranscriptionJobStatus | string;
    
    JobNameContains?: string;
    
    NextToken?: string;
    
    MaxResults?: number;
}

export interface TranscriptionJobSummary {
    
    TranscriptionJobName?: string;
    
    CreationTime?: Date;
    
    StartTime?: Date;
    
    CompletionTime?: Date;
    
    LanguageCode?: LanguageCode | string;
    
    TranscriptionJobStatus?: TranscriptionJobStatus | string;
    
    FailureReason?: string;
    
    OutputLocationType?: OutputLocationType | string;
    
    ContentRedaction?: ContentRedaction;
    
    ModelSettings?: ModelSettings;
    
    IdentifyLanguage?: boolean;
    
    IdentifyMultipleLanguages?: boolean;
    
    IdentifiedLanguageScore?: number;
    
    LanguageCodes?: LanguageCodeItem[];
}
export interface ListTranscriptionJobsResponse {
    
    Status?: TranscriptionJobStatus | string;
    
    NextToken?: string;
    
    TranscriptionJobSummaries?: TranscriptionJobSummary[];
}
export interface ListVocabulariesRequest {
    
    NextToken?: string;
    
    MaxResults?: number;
    
    StateEquals?: VocabularyState | string;
    
    NameContains?: string;
}
export interface ListVocabulariesResponse {
    
    Status?: VocabularyState | string;
    
    NextToken?: string;
    
    Vocabularies?: VocabularyInfo[];
}
export interface ListVocabularyFiltersRequest {
    
    NextToken?: string;
    
    MaxResults?: number;
    
    NameContains?: string;
}

export interface VocabularyFilterInfo {
    
    VocabularyFilterName?: string;
    
    LanguageCode?: LanguageCode | string;
    
    LastModifiedTime?: Date;
}
export interface ListVocabularyFiltersResponse {
    
    NextToken?: string;
    
    VocabularyFilters?: VocabularyFilterInfo[];
}
export interface StartCallAnalyticsJobRequest {
    
    CallAnalyticsJobName: string | undefined;
    
    Media: Media | undefined;
    
    OutputLocation?: string;
    
    OutputEncryptionKMSKeyId?: string;
    
    DataAccessRoleArn?: string;
    
    Settings?: CallAnalyticsJobSettings;
    
    ChannelDefinitions?: ChannelDefinition[];
}
export interface StartCallAnalyticsJobResponse {
    
    CallAnalyticsJob?: CallAnalyticsJob;
}
export interface StartMedicalTranscriptionJobRequest {
    
    MedicalTranscriptionJobName: string | undefined;
    
    LanguageCode: LanguageCode | string | undefined;
    
    MediaSampleRateHertz?: number;
    
    MediaFormat?: MediaFormat | string;
    
    Media: Media | undefined;
    
    OutputBucketName: string | undefined;
    
    OutputKey?: string;
    
    OutputEncryptionKMSKeyId?: string;
    
    KMSEncryptionContext?: Record<string, string>;
    
    Settings?: MedicalTranscriptionSetting;
    
    ContentIdentificationType?: MedicalContentIdentificationType | string;
    
    Specialty: Specialty | string | undefined;
    
    Type: Type | string | undefined;
    
    Tags?: Tag[];
}
export interface StartMedicalTranscriptionJobResponse {
    
    MedicalTranscriptionJob?: MedicalTranscriptionJob;
}

export interface Subtitles {
    
    Formats?: (SubtitleFormat | string)[];
    
    OutputStartIndex?: number;
}
export interface StartTranscriptionJobRequest {
    
    TranscriptionJobName: string | undefined;
    
    LanguageCode?: LanguageCode | string;
    
    MediaSampleRateHertz?: number;
    
    MediaFormat?: MediaFormat | string;
    
    Media: Media | undefined;
    
    OutputBucketName?: string;
    
    OutputKey?: string;
    
    OutputEncryptionKMSKeyId?: string;
    
    KMSEncryptionContext?: Record<string, string>;
    
    Settings?: Settings;
    
    ModelSettings?: ModelSettings;
    
    JobExecutionSettings?: JobExecutionSettings;
    
    ContentRedaction?: ContentRedaction;
    
    IdentifyLanguage?: boolean;
    
    IdentifyMultipleLanguages?: boolean;
    
    LanguageOptions?: (LanguageCode | string)[];
    
    Subtitles?: Subtitles;
    
    Tags?: Tag[];
    
    LanguageIdSettings?: Record<string, LanguageIdSettings>;
}
export interface StartTranscriptionJobResponse {
    
    TranscriptionJob?: TranscriptionJob;
}
export interface TagResourceRequest {
    
    ResourceArn: string | undefined;
    
    Tags: Tag[] | undefined;
}
export interface TagResourceResponse {
}
export interface UntagResourceRequest {
    
    ResourceArn: string | undefined;
    
    TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {
}
export interface UpdateCallAnalyticsCategoryRequest {
    
    CategoryName: string | undefined;
    
    Rules: Rule[] | undefined;
}
export interface UpdateCallAnalyticsCategoryResponse {
    
    CategoryProperties?: CategoryProperties;
}
export interface UpdateMedicalVocabularyRequest {
    
    VocabularyName: string | undefined;
    
    LanguageCode: LanguageCode | string | undefined;
    
    VocabularyFileUri: string | undefined;
}
export interface UpdateMedicalVocabularyResponse {
    
    VocabularyName?: string;
    
    LanguageCode?: LanguageCode | string;
    
    LastModifiedTime?: Date;
    
    VocabularyState?: VocabularyState | string;
}
export interface UpdateVocabularyRequest {
    
    VocabularyName: string | undefined;
    
    LanguageCode: LanguageCode | string | undefined;
    
    Phrases?: string[];
    
    VocabularyFileUri?: string;
}
export interface UpdateVocabularyResponse {
    
    VocabularyName?: string;
    
    LanguageCode?: LanguageCode | string;
    
    LastModifiedTime?: Date;
    
    VocabularyState?: VocabularyState | string;
}
export interface UpdateVocabularyFilterRequest {
    
    VocabularyFilterName: string | undefined;
    
    Words?: string[];
    
    VocabularyFilterFileUri?: string;
}
export interface UpdateVocabularyFilterResponse {
    
    VocabularyFilterName?: string;
    
    LanguageCode?: LanguageCode | string;
    
    LastModifiedTime?: Date;
}

export declare const AbsoluteTimeRangeFilterSensitiveLog: (obj: AbsoluteTimeRange) => any;

export declare const ChannelDefinitionFilterSensitiveLog: (obj: ChannelDefinition) => any;

export declare const MediaFilterSensitiveLog: (obj: Media) => any;

export declare const ContentRedactionFilterSensitiveLog: (obj: ContentRedaction) => any;

export declare const LanguageIdSettingsFilterSensitiveLog: (obj: LanguageIdSettings) => any;

export declare const CallAnalyticsJobSettingsFilterSensitiveLog: (obj: CallAnalyticsJobSettings) => any;

export declare const TranscriptFilterSensitiveLog: (obj: Transcript) => any;

export declare const CallAnalyticsJobFilterSensitiveLog: (obj: CallAnalyticsJob) => any;

export declare const CallAnalyticsJobSummaryFilterSensitiveLog: (obj: CallAnalyticsJobSummary) => any;

export declare const RelativeTimeRangeFilterSensitiveLog: (obj: RelativeTimeRange) => any;

export declare const InterruptionFilterFilterSensitiveLog: (obj: InterruptionFilter) => any;

export declare const NonTalkTimeFilterFilterSensitiveLog: (obj: NonTalkTimeFilter) => any;

export declare const SentimentFilterFilterSensitiveLog: (obj: SentimentFilter) => any;

export declare const TranscriptFilterFilterSensitiveLog: (obj: TranscriptFilter) => any;

export declare const RuleFilterSensitiveLog: (obj: Rule) => any;

export declare const CategoryPropertiesFilterSensitiveLog: (obj: CategoryProperties) => any;

export declare const CreateCallAnalyticsCategoryRequestFilterSensitiveLog: (obj: CreateCallAnalyticsCategoryRequest) => any;

export declare const CreateCallAnalyticsCategoryResponseFilterSensitiveLog: (obj: CreateCallAnalyticsCategoryResponse) => any;

export declare const InputDataConfigFilterSensitiveLog: (obj: InputDataConfig) => any;

export declare const TagFilterSensitiveLog: (obj: Tag) => any;

export declare const CreateLanguageModelRequestFilterSensitiveLog: (obj: CreateLanguageModelRequest) => any;

export declare const CreateLanguageModelResponseFilterSensitiveLog: (obj: CreateLanguageModelResponse) => any;

export declare const CreateMedicalVocabularyRequestFilterSensitiveLog: (obj: CreateMedicalVocabularyRequest) => any;

export declare const CreateMedicalVocabularyResponseFilterSensitiveLog: (obj: CreateMedicalVocabularyResponse) => any;

export declare const CreateVocabularyRequestFilterSensitiveLog: (obj: CreateVocabularyRequest) => any;

export declare const CreateVocabularyResponseFilterSensitiveLog: (obj: CreateVocabularyResponse) => any;

export declare const CreateVocabularyFilterRequestFilterSensitiveLog: (obj: CreateVocabularyFilterRequest) => any;

export declare const CreateVocabularyFilterResponseFilterSensitiveLog: (obj: CreateVocabularyFilterResponse) => any;

export declare const DeleteCallAnalyticsCategoryRequestFilterSensitiveLog: (obj: DeleteCallAnalyticsCategoryRequest) => any;

export declare const DeleteCallAnalyticsCategoryResponseFilterSensitiveLog: (obj: DeleteCallAnalyticsCategoryResponse) => any;

export declare const DeleteCallAnalyticsJobRequestFilterSensitiveLog: (obj: DeleteCallAnalyticsJobRequest) => any;

export declare const DeleteCallAnalyticsJobResponseFilterSensitiveLog: (obj: DeleteCallAnalyticsJobResponse) => any;

export declare const DeleteLanguageModelRequestFilterSensitiveLog: (obj: DeleteLanguageModelRequest) => any;

export declare const DeleteMedicalTranscriptionJobRequestFilterSensitiveLog: (obj: DeleteMedicalTranscriptionJobRequest) => any;

export declare const DeleteMedicalVocabularyRequestFilterSensitiveLog: (obj: DeleteMedicalVocabularyRequest) => any;

export declare const DeleteTranscriptionJobRequestFilterSensitiveLog: (obj: DeleteTranscriptionJobRequest) => any;

export declare const DeleteVocabularyRequestFilterSensitiveLog: (obj: DeleteVocabularyRequest) => any;

export declare const DeleteVocabularyFilterRequestFilterSensitiveLog: (obj: DeleteVocabularyFilterRequest) => any;

export declare const DescribeLanguageModelRequestFilterSensitiveLog: (obj: DescribeLanguageModelRequest) => any;

export declare const LanguageModelFilterSensitiveLog: (obj: LanguageModel) => any;

export declare const DescribeLanguageModelResponseFilterSensitiveLog: (obj: DescribeLanguageModelResponse) => any;

export declare const GetCallAnalyticsCategoryRequestFilterSensitiveLog: (obj: GetCallAnalyticsCategoryRequest) => any;

export declare const GetCallAnalyticsCategoryResponseFilterSensitiveLog: (obj: GetCallAnalyticsCategoryResponse) => any;

export declare const GetCallAnalyticsJobRequestFilterSensitiveLog: (obj: GetCallAnalyticsJobRequest) => any;

export declare const GetCallAnalyticsJobResponseFilterSensitiveLog: (obj: GetCallAnalyticsJobResponse) => any;

export declare const GetMedicalTranscriptionJobRequestFilterSensitiveLog: (obj: GetMedicalTranscriptionJobRequest) => any;

export declare const MedicalTranscriptionSettingFilterSensitiveLog: (obj: MedicalTranscriptionSetting) => any;

export declare const MedicalTranscriptFilterSensitiveLog: (obj: MedicalTranscript) => any;

export declare const MedicalTranscriptionJobFilterSensitiveLog: (obj: MedicalTranscriptionJob) => any;

export declare const GetMedicalTranscriptionJobResponseFilterSensitiveLog: (obj: GetMedicalTranscriptionJobResponse) => any;

export declare const GetMedicalVocabularyRequestFilterSensitiveLog: (obj: GetMedicalVocabularyRequest) => any;

export declare const GetMedicalVocabularyResponseFilterSensitiveLog: (obj: GetMedicalVocabularyResponse) => any;

export declare const GetTranscriptionJobRequestFilterSensitiveLog: (obj: GetTranscriptionJobRequest) => any;

export declare const JobExecutionSettingsFilterSensitiveLog: (obj: JobExecutionSettings) => any;

export declare const LanguageCodeItemFilterSensitiveLog: (obj: LanguageCodeItem) => any;

export declare const ModelSettingsFilterSensitiveLog: (obj: ModelSettings) => any;

export declare const SettingsFilterSensitiveLog: (obj: Settings) => any;

export declare const SubtitlesOutputFilterSensitiveLog: (obj: SubtitlesOutput) => any;

export declare const TranscriptionJobFilterSensitiveLog: (obj: TranscriptionJob) => any;

export declare const GetTranscriptionJobResponseFilterSensitiveLog: (obj: GetTranscriptionJobResponse) => any;

export declare const GetVocabularyRequestFilterSensitiveLog: (obj: GetVocabularyRequest) => any;

export declare const GetVocabularyResponseFilterSensitiveLog: (obj: GetVocabularyResponse) => any;

export declare const GetVocabularyFilterRequestFilterSensitiveLog: (obj: GetVocabularyFilterRequest) => any;

export declare const GetVocabularyFilterResponseFilterSensitiveLog: (obj: GetVocabularyFilterResponse) => any;

export declare const ListCallAnalyticsCategoriesRequestFilterSensitiveLog: (obj: ListCallAnalyticsCategoriesRequest) => any;

export declare const ListCallAnalyticsCategoriesResponseFilterSensitiveLog: (obj: ListCallAnalyticsCategoriesResponse) => any;

export declare const ListCallAnalyticsJobsRequestFilterSensitiveLog: (obj: ListCallAnalyticsJobsRequest) => any;

export declare const ListCallAnalyticsJobsResponseFilterSensitiveLog: (obj: ListCallAnalyticsJobsResponse) => any;

export declare const ListLanguageModelsRequestFilterSensitiveLog: (obj: ListLanguageModelsRequest) => any;

export declare const ListLanguageModelsResponseFilterSensitiveLog: (obj: ListLanguageModelsResponse) => any;

export declare const ListMedicalTranscriptionJobsRequestFilterSensitiveLog: (obj: ListMedicalTranscriptionJobsRequest) => any;

export declare const MedicalTranscriptionJobSummaryFilterSensitiveLog: (obj: MedicalTranscriptionJobSummary) => any;

export declare const ListMedicalTranscriptionJobsResponseFilterSensitiveLog: (obj: ListMedicalTranscriptionJobsResponse) => any;

export declare const ListMedicalVocabulariesRequestFilterSensitiveLog: (obj: ListMedicalVocabulariesRequest) => any;

export declare const VocabularyInfoFilterSensitiveLog: (obj: VocabularyInfo) => any;

export declare const ListMedicalVocabulariesResponseFilterSensitiveLog: (obj: ListMedicalVocabulariesResponse) => any;

export declare const ListTagsForResourceRequestFilterSensitiveLog: (obj: ListTagsForResourceRequest) => any;

export declare const ListTagsForResourceResponseFilterSensitiveLog: (obj: ListTagsForResourceResponse) => any;

export declare const ListTranscriptionJobsRequestFilterSensitiveLog: (obj: ListTranscriptionJobsRequest) => any;

export declare const TranscriptionJobSummaryFilterSensitiveLog: (obj: TranscriptionJobSummary) => any;

export declare const ListTranscriptionJobsResponseFilterSensitiveLog: (obj: ListTranscriptionJobsResponse) => any;

export declare const ListVocabulariesRequestFilterSensitiveLog: (obj: ListVocabulariesRequest) => any;

export declare const ListVocabulariesResponseFilterSensitiveLog: (obj: ListVocabulariesResponse) => any;

export declare const ListVocabularyFiltersRequestFilterSensitiveLog: (obj: ListVocabularyFiltersRequest) => any;

export declare const VocabularyFilterInfoFilterSensitiveLog: (obj: VocabularyFilterInfo) => any;

export declare const ListVocabularyFiltersResponseFilterSensitiveLog: (obj: ListVocabularyFiltersResponse) => any;

export declare const StartCallAnalyticsJobRequestFilterSensitiveLog: (obj: StartCallAnalyticsJobRequest) => any;

export declare const StartCallAnalyticsJobResponseFilterSensitiveLog: (obj: StartCallAnalyticsJobResponse) => any;

export declare const StartMedicalTranscriptionJobRequestFilterSensitiveLog: (obj: StartMedicalTranscriptionJobRequest) => any;

export declare const StartMedicalTranscriptionJobResponseFilterSensitiveLog: (obj: StartMedicalTranscriptionJobResponse) => any;

export declare const SubtitlesFilterSensitiveLog: (obj: Subtitles) => any;

export declare const StartTranscriptionJobRequestFilterSensitiveLog: (obj: StartTranscriptionJobRequest) => any;

export declare const StartTranscriptionJobResponseFilterSensitiveLog: (obj: StartTranscriptionJobResponse) => any;

export declare const TagResourceRequestFilterSensitiveLog: (obj: TagResourceRequest) => any;

export declare const TagResourceResponseFilterSensitiveLog: (obj: TagResourceResponse) => any;

export declare const UntagResourceRequestFilterSensitiveLog: (obj: UntagResourceRequest) => any;

export declare const UntagResourceResponseFilterSensitiveLog: (obj: UntagResourceResponse) => any;

export declare const UpdateCallAnalyticsCategoryRequestFilterSensitiveLog: (obj: UpdateCallAnalyticsCategoryRequest) => any;

export declare const UpdateCallAnalyticsCategoryResponseFilterSensitiveLog: (obj: UpdateCallAnalyticsCategoryResponse) => any;

export declare const UpdateMedicalVocabularyRequestFilterSensitiveLog: (obj: UpdateMedicalVocabularyRequest) => any;

export declare const UpdateMedicalVocabularyResponseFilterSensitiveLog: (obj: UpdateMedicalVocabularyResponse) => any;

export declare const UpdateVocabularyRequestFilterSensitiveLog: (obj: UpdateVocabularyRequest) => any;

export declare const UpdateVocabularyResponseFilterSensitiveLog: (obj: UpdateVocabularyResponse) => any;

export declare const UpdateVocabularyFilterRequestFilterSensitiveLog: (obj: UpdateVocabularyFilterRequest) => any;

export declare const UpdateVocabularyFilterResponseFilterSensitiveLog: (obj: UpdateVocabularyFilterResponse) => any;
